
SOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001086  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000032  00800060  00001086  0000111a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002e  00800092  00800092  0000114c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000114c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000117c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002d0  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b93  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ff8  00000000  00000000  0000401b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001e05  00000000  00000000  00005013  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000005c8  00000000  00000000  00006e18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000011ae  00000000  00000000  000073e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000208e  00000000  00000000  0000858e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  0000a61c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_1>
       8:	0c 94 09 02 	jmp	0x412	; 0x412 <__vector_2>
       c:	0c 94 35 02 	jmp	0x46a	; 0x46a <__vector_3>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 c4 03 	jmp	0x788	; 0x788 <__vector_5>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 94 03 	jmp	0x728	; 0x728 <__vector_9>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 64 03 	jmp	0x6c8	; 0x6c8 <__vector_11>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      54:	a1 04       	cpc	r10, r1
      56:	ac 04       	cpc	r10, r12
      58:	b7 04       	cpc	r11, r7
      5a:	c7 05       	cpc	r28, r7
      5c:	c2 04       	cpc	r12, r2
      5e:	c7 05       	cpc	r28, r7
      60:	cd 04       	cpc	r12, r13
      62:	d8 04       	cpc	r13, r8
      64:	e3 04       	cpc	r14, r3
      66:	ee 04       	cpc	r14, r14
      68:	04 05       	cpc	r16, r4
      6a:	0f 05       	cpc	r16, r15
      6c:	1a 05       	cpc	r17, r10
      6e:	c9 05       	cpc	r28, r9
      70:	25 05       	cpc	r18, r5
      72:	c9 05       	cpc	r28, r9
      74:	30 05       	cpc	r19, r0
      76:	3b 05       	cpc	r19, r11
      78:	46 05       	cpc	r20, r6
      7a:	51 05       	cpc	r21, r1
      7c:	67 05       	cpc	r22, r7
      7e:	72 05       	cpc	r23, r2
      80:	7d 05       	cpc	r23, r13
      82:	88 05       	cpc	r24, r8
      84:	93 05       	cpc	r25, r3
      86:	9e 05       	cpc	r25, r14
      88:	a9 05       	cpc	r26, r9
      8a:	b4 05       	cpc	r27, r4

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf e5       	ldi	r28, 0x5F	; 95
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	10 e0       	ldi	r17, 0x00	; 0
      9a:	a0 e6       	ldi	r26, 0x60	; 96
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	e6 e8       	ldi	r30, 0x86	; 134
      a0:	f0 e1       	ldi	r31, 0x10	; 16
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a2 39       	cpi	r26, 0x92	; 146
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	20 e0       	ldi	r18, 0x00	; 0
      b0:	a2 e9       	ldi	r26, 0x92	; 146
      b2:	b0 e0       	ldi	r27, 0x00	; 0
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a0 3c       	cpi	r26, 0xC0	; 192
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 30 01 	call	0x260	; 0x260 <main>
      c2:	0c 94 41 08 	jmp	0x1082	; 0x1082 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <Stop_sos_handler>:
      ca:	80 91 92 00 	lds	r24, 0x0092	; 0x800092 <__data_end>
      ce:	81 11       	cpse	r24, r1
      d0:	06 c0       	rjmp	.+12     	; 0xde <Stop_sos_handler+0x14>
      d2:	81 e0       	ldi	r24, 0x01	; 1
      d4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Start_Flag>
      d8:	80 93 92 00 	sts	0x0092, r24	; 0x800092 <__data_end>
      dc:	07 c0       	rjmp	.+14     	; 0xec <Stop_sos_handler+0x22>
      de:	81 30       	cpi	r24, 0x01	; 1
      e0:	29 f4       	brne	.+10     	; 0xec <Stop_sos_handler+0x22>
      e2:	82 e0       	ldi	r24, 0x02	; 2
      e4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <Start_Flag>
      e8:	10 92 92 00 	sts	0x0092, r1	; 0x800092 <__data_end>
      ec:	83 e6       	ldi	r24, 0x63	; 99
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_turn_toggle>
      f4:	08 95       	ret

000000f6 <task_2_handler>:
      f6:	80 e6       	ldi	r24, 0x60	; 96
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_turn_toggle>
      fe:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <u8_sg_counter>
     102:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <u8_sg_counter+0x1>
     106:	01 96       	adiw	r24, 0x01	; 1
     108:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <u8_sg_counter+0x1>
     10c:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <u8_sg_counter>
     110:	08 95       	ret

00000112 <task_1_handler>:
     112:	83 e6       	ldi	r24, 0x63	; 99
     114:	90 e0       	ldi	r25, 0x00	; 0
     116:	0e 94 1e 01 	call	0x23c	; 0x23c <LED_turn_toggle>
     11a:	08 95       	ret

0000011c <APP_init>:
     11c:	8f b7       	in	r24, 0x3f	; 63
     11e:	80 68       	ori	r24, 0x80	; 128
     120:	8f bf       	out	0x3f, r24	; 63
     122:	78 94       	sei
     124:	0e 94 c9 06 	call	0xd92	; 0xd92 <SOS_init>
     128:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <enu_sg_ret>
     12c:	89 2b       	or	r24, r25
     12e:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enu_sg_ret>
     132:	83 e6       	ldi	r24, 0x63	; 99
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_initialize>
     13a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enu_sg_ret>
     13e:	80 e6       	ldi	r24, 0x60	; 96
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 f5 00 	call	0x1ea	; 0x1ea <LED_initialize>
     146:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <enu_sg_ret>
     14a:	89 2b       	or	r24, r25
     14c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enu_sg_ret>
     150:	89 e8       	ldi	r24, 0x89	; 137
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <str_g_task_1_+0x6>
     158:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <str_g_task_1_+0x5>
     15c:	8f e6       	ldi	r24, 0x6F	; 111
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SOS_create_task>
     164:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <enu_sg_ret>
     168:	89 2b       	or	r24, r25
     16a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enu_sg_ret>
     16e:	8b e7       	ldi	r24, 0x7B	; 123
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <str_g_task_2_+0x6>
     176:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <str_g_task_2_+0x5>
     17a:	88 e6       	ldi	r24, 0x68	; 104
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 a6 07 	call	0xf4c	; 0xf4c <SOS_create_task>
     182:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <enu_sg_ret>
     186:	89 2b       	or	r24, r25
     188:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enu_sg_ret>
     18c:	62 e0       	ldi	r22, 0x02	; 2
     18e:	85 e6       	ldi	r24, 0x65	; 101
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <EXT_INTx_setCallBack_manger>
     196:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <enu_sg_ret>
     19a:	89 2b       	or	r24, r25
     19c:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enu_sg_ret>
     1a0:	86 e7       	ldi	r24, 0x76	; 118
     1a2:	90 e0       	ldi	r25, 0x00	; 0
     1a4:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <EXT_INTx_Init_manger>
     1a8:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <enu_sg_ret>
     1ac:	89 2b       	or	r24, r25
     1ae:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enu_sg_ret>
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	85 e6       	ldi	r24, 0x65	; 101
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <EXT_INTx_setCallBack_manger>
     1bc:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <enu_sg_ret>
     1c0:	89 2b       	or	r24, r25
     1c2:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enu_sg_ret>
     1c6:	88 e7       	ldi	r24, 0x78	; 120
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <EXT_INTx_Init_manger>
     1ce:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <enu_sg_ret>
     1d2:	89 2b       	or	r24, r25
     1d4:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <enu_sg_ret>
     1d8:	8f ef       	ldi	r24, 0xFF	; 255
     1da:	84 bb       	out	0x14, r24	; 20
     1dc:	15 ba       	out	0x15, r1	; 21
     1de:	8a bb       	out	0x1a, r24	; 26
     1e0:	1b ba       	out	0x1b, r1	; 27
     1e2:	08 95       	ret

000001e4 <APP_start>:
     1e4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <SOS_run>
     1e8:	08 95       	ret

000001ea <LED_initialize>:
	else
	{
		ret = DIO_pin_write_logic(&(led_ptr->led_pin),DIO_LOGIC_LOW);
	}
	return ret;
}
     1ea:	cf 93       	push	r28
     1ec:	df 93       	push	r29
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	d9 f0       	breq	.+54     	; 0x228 <LED_initialize+0x3e>
     1f2:	fc 01       	movw	r30, r24
     1f4:	21 81       	ldd	r18, Z+1	; 0x01
     1f6:	28 30       	cpi	r18, 0x08	; 8
     1f8:	c8 f4       	brcc	.+50     	; 0x22c <LED_initialize+0x42>
     1fa:	20 81       	ld	r18, Z
     1fc:	24 30       	cpi	r18, 0x04	; 4
     1fe:	c0 f4       	brcc	.+48     	; 0x230 <LED_initialize+0x46>
     200:	ec 01       	movw	r28, r24
     202:	61 e0       	ldi	r22, 0x01	; 1
     204:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_pin_direction_intialize>
     208:	8a 81       	ldd	r24, Y+2	; 0x02
     20a:	88 23       	and	r24, r24
     20c:	19 f0       	breq	.+6      	; 0x214 <LED_initialize+0x2a>
     20e:	81 30       	cpi	r24, 0x01	; 1
     210:	31 f0       	breq	.+12     	; 0x21e <LED_initialize+0x34>
     212:	10 c0       	rjmp	.+32     	; 0x234 <LED_initialize+0x4a>
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	ce 01       	movw	r24, r28
     218:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_pin_write_logic>
     21c:	0c c0       	rjmp	.+24     	; 0x236 <LED_initialize+0x4c>
     21e:	61 e0       	ldi	r22, 0x01	; 1
     220:	ce 01       	movw	r24, r28
     222:	0e 94 77 01 	call	0x2ee	; 0x2ee <DIO_pin_write_logic>
     226:	07 c0       	rjmp	.+14     	; 0x236 <LED_initialize+0x4c>
     228:	80 e0       	ldi	r24, 0x00	; 0
     22a:	05 c0       	rjmp	.+10     	; 0x236 <LED_initialize+0x4c>
     22c:	80 e0       	ldi	r24, 0x00	; 0
     22e:	03 c0       	rjmp	.+6      	; 0x236 <LED_initialize+0x4c>
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	01 c0       	rjmp	.+2      	; 0x236 <LED_initialize+0x4c>
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	df 91       	pop	r29
     238:	cf 91       	pop	r28
     23a:	08 95       	ret

0000023c <LED_turn_toggle>:
Std_ReturnType LED_turn_toggle (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
     23c:	00 97       	sbiw	r24, 0x00	; 0
     23e:	51 f0       	breq	.+20     	; 0x254 <LED_turn_toggle+0x18>
     240:	fc 01       	movw	r30, r24
     242:	21 81       	ldd	r18, Z+1	; 0x01
     244:	28 30       	cpi	r18, 0x08	; 8
     246:	40 f4       	brcc	.+16     	; 0x258 <LED_turn_toggle+0x1c>
     248:	20 81       	ld	r18, Z
     24a:	24 30       	cpi	r18, 0x04	; 4
     24c:	38 f4       	brcc	.+14     	; 0x25c <LED_turn_toggle+0x20>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret = DIO_pin_toggle_logic(&(led_ptr->led_pin));
     24e:	0e 94 b8 01 	call	0x370	; 0x370 <DIO_pin_toggle_logic>
     252:	08 95       	ret
Std_ReturnType LED_turn_toggle (const led_t *led_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == led_ptr || (led_ptr->led_pin.pin > PORT_PIN_MAX_NUMBER-1) || (led_ptr->led_pin.port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
     254:	80 e0       	ldi	r24, 0x00	; 0
     256:	08 95       	ret
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	08 95       	ret
     25c:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = DIO_pin_toggle_logic(&(led_ptr->led_pin));
	}
	return ret;
     25e:	08 95       	ret

00000260 <main>:
	
	/*this is fork one from m_sayed*/
	
	/*This no fork*/
	
	APP_init();
     260:	0e 94 8e 00 	call	0x11c	; 0x11c <APP_init>
	APP_start();
     264:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <APP_start>

}
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	08 95       	ret

0000026e <DIO_pin_direction_intialize>:
	else
	{
		*logic_ptr = READ_BIT(*(pin_registers[pin_config_ptr->port]),pin_config_ptr->pin);
	}
	return ret;
}
     26e:	00 97       	sbiw	r24, 0x00	; 0
     270:	b1 f1       	breq	.+108    	; 0x2de <DIO_pin_direction_intialize+0x70>
     272:	dc 01       	movw	r26, r24
     274:	11 96       	adiw	r26, 0x01	; 1
     276:	2c 91       	ld	r18, X
     278:	11 97       	sbiw	r26, 0x01	; 1
     27a:	28 30       	cpi	r18, 0x08	; 8
     27c:	90 f5       	brcc	.+100    	; 0x2e2 <DIO_pin_direction_intialize+0x74>
     27e:	ec 91       	ld	r30, X
     280:	e4 30       	cpi	r30, 0x04	; 4
     282:	88 f5       	brcc	.+98     	; 0x2e6 <DIO_pin_direction_intialize+0x78>
     284:	66 23       	and	r22, r22
     286:	b1 f0       	breq	.+44     	; 0x2b4 <DIO_pin_direction_intialize+0x46>
     288:	61 30       	cpi	r22, 0x01	; 1
     28a:	79 f5       	brne	.+94     	; 0x2ea <DIO_pin_direction_intialize+0x7c>
     28c:	f0 e0       	ldi	r31, 0x00	; 0
     28e:	ee 0f       	add	r30, r30
     290:	ff 1f       	adc	r31, r31
     292:	e7 57       	subi	r30, 0x77	; 119
     294:	ff 4f       	sbci	r31, 0xFF	; 255
     296:	01 90       	ld	r0, Z+
     298:	f0 81       	ld	r31, Z
     29a:	e0 2d       	mov	r30, r0
     29c:	30 81       	ld	r19, Z
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_pin_direction_intialize+0x3a>
     2a4:	88 0f       	add	r24, r24
     2a6:	99 1f       	adc	r25, r25
     2a8:	2a 95       	dec	r18
     2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_pin_direction_intialize+0x36>
     2ac:	83 2b       	or	r24, r19
     2ae:	80 83       	st	Z, r24
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	08 95       	ret
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	ee 0f       	add	r30, r30
     2b8:	ff 1f       	adc	r31, r31
     2ba:	e7 57       	subi	r30, 0x77	; 119
     2bc:	ff 4f       	sbci	r31, 0xFF	; 255
     2be:	01 90       	ld	r0, Z+
     2c0:	f0 81       	ld	r31, Z
     2c2:	e0 2d       	mov	r30, r0
     2c4:	30 81       	ld	r19, Z
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_pin_direction_intialize+0x62>
     2cc:	88 0f       	add	r24, r24
     2ce:	99 1f       	adc	r25, r25
     2d0:	2a 95       	dec	r18
     2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_pin_direction_intialize+0x5e>
     2d4:	80 95       	com	r24
     2d6:	83 23       	and	r24, r19
     2d8:	80 83       	st	Z, r24
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	08 95       	ret
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	08 95       	ret
     2e2:	80 e0       	ldi	r24, 0x00	; 0
     2e4:	08 95       	ret
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	08 95       	ret
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	08 95       	ret

000002ee <DIO_pin_write_logic>:
     2ee:	00 97       	sbiw	r24, 0x00	; 0
     2f0:	b9 f1       	breq	.+110    	; 0x360 <DIO_pin_write_logic+0x72>
     2f2:	dc 01       	movw	r26, r24
     2f4:	11 96       	adiw	r26, 0x01	; 1
     2f6:	2c 91       	ld	r18, X
     2f8:	11 97       	sbiw	r26, 0x01	; 1
     2fa:	28 30       	cpi	r18, 0x08	; 8
     2fc:	98 f5       	brcc	.+102    	; 0x364 <DIO_pin_write_logic+0x76>
     2fe:	ec 91       	ld	r30, X
     300:	e4 30       	cpi	r30, 0x04	; 4
     302:	90 f5       	brcc	.+100    	; 0x368 <DIO_pin_write_logic+0x7a>
     304:	66 23       	and	r22, r22
     306:	19 f0       	breq	.+6      	; 0x30e <DIO_pin_write_logic+0x20>
     308:	61 30       	cpi	r22, 0x01	; 1
     30a:	b1 f0       	breq	.+44     	; 0x338 <DIO_pin_write_logic+0x4a>
     30c:	2f c0       	rjmp	.+94     	; 0x36c <DIO_pin_write_logic+0x7e>
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	ee 0f       	add	r30, r30
     312:	ff 1f       	adc	r31, r31
     314:	ef 57       	subi	r30, 0x7F	; 127
     316:	ff 4f       	sbci	r31, 0xFF	; 255
     318:	01 90       	ld	r0, Z+
     31a:	f0 81       	ld	r31, Z
     31c:	e0 2d       	mov	r30, r0
     31e:	30 81       	ld	r19, Z
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_pin_write_logic+0x3c>
     326:	88 0f       	add	r24, r24
     328:	99 1f       	adc	r25, r25
     32a:	2a 95       	dec	r18
     32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_pin_write_logic+0x38>
     32e:	80 95       	com	r24
     330:	83 23       	and	r24, r19
     332:	80 83       	st	Z, r24
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	08 95       	ret
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ee 0f       	add	r30, r30
     33c:	ff 1f       	adc	r31, r31
     33e:	ef 57       	subi	r30, 0x7F	; 127
     340:	ff 4f       	sbci	r31, 0xFF	; 255
     342:	01 90       	ld	r0, Z+
     344:	f0 81       	ld	r31, Z
     346:	e0 2d       	mov	r30, r0
     348:	30 81       	ld	r19, Z
     34a:	81 e0       	ldi	r24, 0x01	; 1
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_pin_write_logic+0x66>
     350:	88 0f       	add	r24, r24
     352:	99 1f       	adc	r25, r25
     354:	2a 95       	dec	r18
     356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_pin_write_logic+0x62>
     358:	83 2b       	or	r24, r19
     35a:	80 83       	st	Z, r24
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	08 95       	ret
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	08 95       	ret
     364:	80 e0       	ldi	r24, 0x00	; 0
     366:	08 95       	ret
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	08 95       	ret
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	08 95       	ret

00000370 <DIO_pin_toggle_logic>:

Std_ReturnType DIO_pin_toggle_logic(const pin_config_t *pin_config_ptr)
{
	Std_ReturnType ret = E_OK;
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
     370:	00 97       	sbiw	r24, 0x00	; 0
     372:	e9 f0       	breq	.+58     	; 0x3ae <DIO_pin_toggle_logic+0x3e>
     374:	dc 01       	movw	r26, r24
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	2c 91       	ld	r18, X
     37a:	11 97       	sbiw	r26, 0x01	; 1
     37c:	28 30       	cpi	r18, 0x08	; 8
     37e:	c8 f4       	brcc	.+50     	; 0x3b2 <DIO_pin_toggle_logic+0x42>
     380:	ec 91       	ld	r30, X
     382:	e4 30       	cpi	r30, 0x04	; 4
     384:	c0 f4       	brcc	.+48     	; 0x3b6 <DIO_pin_toggle_logic+0x46>
	{
		ret = E_NOT_OK;
	}
	else
	{
		 TOGGLE_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
     386:	f0 e0       	ldi	r31, 0x00	; 0
     388:	ee 0f       	add	r30, r30
     38a:	ff 1f       	adc	r31, r31
     38c:	ef 57       	subi	r30, 0x7F	; 127
     38e:	ff 4f       	sbci	r31, 0xFF	; 255
     390:	01 90       	ld	r0, Z+
     392:	f0 81       	ld	r31, Z
     394:	e0 2d       	mov	r30, r0
     396:	30 81       	ld	r19, Z
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	02 c0       	rjmp	.+4      	; 0x3a2 <DIO_pin_toggle_logic+0x32>
     39e:	88 0f       	add	r24, r24
     3a0:	99 1f       	adc	r25, r25
     3a2:	2a 95       	dec	r18
     3a4:	e2 f7       	brpl	.-8      	; 0x39e <DIO_pin_toggle_logic+0x2e>
     3a6:	83 27       	eor	r24, r19
     3a8:	80 83       	st	Z, r24
	return ret;
}

Std_ReturnType DIO_pin_toggle_logic(const pin_config_t *pin_config_ptr)
{
	Std_ReturnType ret = E_OK;
     3aa:	81 e0       	ldi	r24, 0x01	; 1
     3ac:	08 95       	ret
	if(NULL == pin_config_ptr || (pin_config_ptr->pin > PORT_PIN_MAX_NUMBER-1) || (pin_config_ptr->port > PORT_MAX_NUMBER-1))
	{
		ret = E_NOT_OK;
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	08 95       	ret
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	08 95       	ret
     3b6:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		 TOGGLE_BIT(*(port_registers[pin_config_ptr->port]),pin_config_ptr->pin);
	}
	return ret;
}
     3b8:	08 95       	ret

000003ba <__vector_1>:
     3ba:	1f 92       	push	r1
     3bc:	0f 92       	push	r0
     3be:	0f b6       	in	r0, 0x3f	; 63
     3c0:	0f 92       	push	r0
     3c2:	11 24       	eor	r1, r1
     3c4:	2f 93       	push	r18
     3c6:	3f 93       	push	r19
     3c8:	4f 93       	push	r20
     3ca:	5f 93       	push	r21
     3cc:	6f 93       	push	r22
     3ce:	7f 93       	push	r23
     3d0:	8f 93       	push	r24
     3d2:	9f 93       	push	r25
     3d4:	af 93       	push	r26
     3d6:	bf 93       	push	r27
     3d8:	ef 93       	push	r30
     3da:	ff 93       	push	r31
     3dc:	8a b7       	in	r24, 0x3a	; 58
     3de:	80 64       	ori	r24, 0x40	; 64
     3e0:	8a bf       	out	0x3a, r24	; 58
     3e2:	e0 91 9a 00 	lds	r30, 0x009A	; 0x80009a <g_EXT_INT0_fptr>
     3e6:	f0 91 9b 00 	lds	r31, 0x009B	; 0x80009b <g_EXT_INT0_fptr+0x1>
     3ea:	30 97       	sbiw	r30, 0x00	; 0
     3ec:	09 f0       	breq	.+2      	; 0x3f0 <__vector_1+0x36>
     3ee:	09 95       	icall
     3f0:	ff 91       	pop	r31
     3f2:	ef 91       	pop	r30
     3f4:	bf 91       	pop	r27
     3f6:	af 91       	pop	r26
     3f8:	9f 91       	pop	r25
     3fa:	8f 91       	pop	r24
     3fc:	7f 91       	pop	r23
     3fe:	6f 91       	pop	r22
     400:	5f 91       	pop	r21
     402:	4f 91       	pop	r20
     404:	3f 91       	pop	r19
     406:	2f 91       	pop	r18
     408:	0f 90       	pop	r0
     40a:	0f be       	out	0x3f, r0	; 63
     40c:	0f 90       	pop	r0
     40e:	1f 90       	pop	r1
     410:	18 95       	reti

00000412 <__vector_2>:
     412:	1f 92       	push	r1
     414:	0f 92       	push	r0
     416:	0f b6       	in	r0, 0x3f	; 63
     418:	0f 92       	push	r0
     41a:	11 24       	eor	r1, r1
     41c:	2f 93       	push	r18
     41e:	3f 93       	push	r19
     420:	4f 93       	push	r20
     422:	5f 93       	push	r21
     424:	6f 93       	push	r22
     426:	7f 93       	push	r23
     428:	8f 93       	push	r24
     42a:	9f 93       	push	r25
     42c:	af 93       	push	r26
     42e:	bf 93       	push	r27
     430:	ef 93       	push	r30
     432:	ff 93       	push	r31
     434:	8a b7       	in	r24, 0x3a	; 58
     436:	80 68       	ori	r24, 0x80	; 128
     438:	8a bf       	out	0x3a, r24	; 58
     43a:	e0 91 98 00 	lds	r30, 0x0098	; 0x800098 <g_EXT_INT1_fptr>
     43e:	f0 91 99 00 	lds	r31, 0x0099	; 0x800099 <g_EXT_INT1_fptr+0x1>
     442:	30 97       	sbiw	r30, 0x00	; 0
     444:	09 f0       	breq	.+2      	; 0x448 <__vector_2+0x36>
     446:	09 95       	icall
     448:	ff 91       	pop	r31
     44a:	ef 91       	pop	r30
     44c:	bf 91       	pop	r27
     44e:	af 91       	pop	r26
     450:	9f 91       	pop	r25
     452:	8f 91       	pop	r24
     454:	7f 91       	pop	r23
     456:	6f 91       	pop	r22
     458:	5f 91       	pop	r21
     45a:	4f 91       	pop	r20
     45c:	3f 91       	pop	r19
     45e:	2f 91       	pop	r18
     460:	0f 90       	pop	r0
     462:	0f be       	out	0x3f, r0	; 63
     464:	0f 90       	pop	r0
     466:	1f 90       	pop	r1
     468:	18 95       	reti

0000046a <__vector_3>:
     46a:	1f 92       	push	r1
     46c:	0f 92       	push	r0
     46e:	0f b6       	in	r0, 0x3f	; 63
     470:	0f 92       	push	r0
     472:	11 24       	eor	r1, r1
     474:	2f 93       	push	r18
     476:	3f 93       	push	r19
     478:	4f 93       	push	r20
     47a:	5f 93       	push	r21
     47c:	6f 93       	push	r22
     47e:	7f 93       	push	r23
     480:	8f 93       	push	r24
     482:	9f 93       	push	r25
     484:	af 93       	push	r26
     486:	bf 93       	push	r27
     488:	ef 93       	push	r30
     48a:	ff 93       	push	r31
     48c:	8a b7       	in	r24, 0x3a	; 58
     48e:	80 68       	ori	r24, 0x80	; 128
     490:	8a bf       	out	0x3a, r24	; 58
     492:	e0 91 96 00 	lds	r30, 0x0096	; 0x800096 <g_EXT_INT2_fptr>
     496:	f0 91 97 00 	lds	r31, 0x0097	; 0x800097 <g_EXT_INT2_fptr+0x1>
     49a:	30 97       	sbiw	r30, 0x00	; 0
     49c:	09 f0       	breq	.+2      	; 0x4a0 <__vector_3+0x36>
     49e:	09 95       	icall
     4a0:	ff 91       	pop	r31
     4a2:	ef 91       	pop	r30
     4a4:	bf 91       	pop	r27
     4a6:	af 91       	pop	r26
     4a8:	9f 91       	pop	r25
     4aa:	8f 91       	pop	r24
     4ac:	7f 91       	pop	r23
     4ae:	6f 91       	pop	r22
     4b0:	5f 91       	pop	r21
     4b2:	4f 91       	pop	r20
     4b4:	3f 91       	pop	r19
     4b6:	2f 91       	pop	r18
     4b8:	0f 90       	pop	r0
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	0f 90       	pop	r0
     4be:	1f 90       	pop	r1
     4c0:	18 95       	reti

000004c2 <EXT_INTx_setCallBack>:
     4c2:	00 97       	sbiw	r24, 0x00	; 0
     4c4:	d1 f0       	breq	.+52     	; 0x4fa <EXT_INTx_setCallBack+0x38>
     4c6:	63 30       	cpi	r22, 0x03	; 3
     4c8:	d0 f4       	brcc	.+52     	; 0x4fe <EXT_INTx_setCallBack+0x3c>
     4ca:	61 30       	cpi	r22, 0x01	; 1
     4cc:	51 f0       	breq	.+20     	; 0x4e2 <EXT_INTx_setCallBack+0x20>
     4ce:	18 f0       	brcs	.+6      	; 0x4d6 <EXT_INTx_setCallBack+0x14>
     4d0:	62 30       	cpi	r22, 0x02	; 2
     4d2:	69 f0       	breq	.+26     	; 0x4ee <EXT_INTx_setCallBack+0x2c>
     4d4:	16 c0       	rjmp	.+44     	; 0x502 <EXT_INTx_setCallBack+0x40>
     4d6:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <g_EXT_INT0_fptr+0x1>
     4da:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <g_EXT_INT0_fptr>
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	08 95       	ret
     4e2:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <g_EXT_INT1_fptr+0x1>
     4e6:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <g_EXT_INT1_fptr>
     4ea:	81 e0       	ldi	r24, 0x01	; 1
     4ec:	08 95       	ret
     4ee:	90 93 97 00 	sts	0x0097, r25	; 0x800097 <g_EXT_INT2_fptr+0x1>
     4f2:	80 93 96 00 	sts	0x0096, r24	; 0x800096 <g_EXT_INT2_fptr>
     4f6:	81 e0       	ldi	r24, 0x01	; 1
     4f8:	08 95       	ret
     4fa:	80 e0       	ldi	r24, 0x00	; 0
     4fc:	08 95       	ret
     4fe:	80 e0       	ldi	r24, 0x00	; 0
     500:	08 95       	ret
     502:	80 e0       	ldi	r24, 0x00	; 0
     504:	08 95       	ret

00000506 <EXT_INTx_setEdgeType>:
     506:	63 30       	cpi	r22, 0x03	; 3
     508:	08 f0       	brcs	.+2      	; 0x50c <EXT_INTx_setEdgeType+0x6>
     50a:	69 c0       	rjmp	.+210    	; 0x5de <EXT_INTx_setEdgeType+0xd8>
     50c:	85 30       	cpi	r24, 0x05	; 5
     50e:	08 f0       	brcs	.+2      	; 0x512 <EXT_INTx_setEdgeType+0xc>
     510:	68 c0       	rjmp	.+208    	; 0x5e2 <EXT_INTx_setEdgeType+0xdc>
     512:	61 30       	cpi	r22, 0x01	; 1
     514:	69 f1       	breq	.+90     	; 0x570 <EXT_INTx_setEdgeType+0x6a>
     516:	20 f0       	brcs	.+8      	; 0x520 <EXT_INTx_setEdgeType+0x1a>
     518:	62 30       	cpi	r22, 0x02	; 2
     51a:	09 f4       	brne	.+2      	; 0x51e <EXT_INTx_setEdgeType+0x18>
     51c:	51 c0       	rjmp	.+162    	; 0x5c0 <EXT_INTx_setEdgeType+0xba>
     51e:	63 c0       	rjmp	.+198    	; 0x5e6 <EXT_INTx_setEdgeType+0xe0>
     520:	81 30       	cpi	r24, 0x01	; 1
     522:	71 f0       	breq	.+28     	; 0x540 <EXT_INTx_setEdgeType+0x3a>
     524:	28 f0       	brcs	.+10     	; 0x530 <EXT_INTx_setEdgeType+0x2a>
     526:	82 30       	cpi	r24, 0x02	; 2
     528:	99 f0       	breq	.+38     	; 0x550 <EXT_INTx_setEdgeType+0x4a>
     52a:	83 30       	cpi	r24, 0x03	; 3
     52c:	c9 f0       	breq	.+50     	; 0x560 <EXT_INTx_setEdgeType+0x5a>
     52e:	5d c0       	rjmp	.+186    	; 0x5ea <EXT_INTx_setEdgeType+0xe4>
     530:	85 b7       	in	r24, 0x35	; 53
     532:	8e 7f       	andi	r24, 0xFE	; 254
     534:	85 bf       	out	0x35, r24	; 53
     536:	85 b7       	in	r24, 0x35	; 53
     538:	8d 7f       	andi	r24, 0xFD	; 253
     53a:	85 bf       	out	0x35, r24	; 53
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	08 95       	ret
     540:	85 b7       	in	r24, 0x35	; 53
     542:	81 60       	ori	r24, 0x01	; 1
     544:	85 bf       	out	0x35, r24	; 53
     546:	85 b7       	in	r24, 0x35	; 53
     548:	8d 7f       	andi	r24, 0xFD	; 253
     54a:	85 bf       	out	0x35, r24	; 53
     54c:	81 e0       	ldi	r24, 0x01	; 1
     54e:	08 95       	ret
     550:	85 b7       	in	r24, 0x35	; 53
     552:	8e 7f       	andi	r24, 0xFE	; 254
     554:	85 bf       	out	0x35, r24	; 53
     556:	85 b7       	in	r24, 0x35	; 53
     558:	82 60       	ori	r24, 0x02	; 2
     55a:	85 bf       	out	0x35, r24	; 53
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	08 95       	ret
     560:	85 b7       	in	r24, 0x35	; 53
     562:	81 60       	ori	r24, 0x01	; 1
     564:	85 bf       	out	0x35, r24	; 53
     566:	85 b7       	in	r24, 0x35	; 53
     568:	82 60       	ori	r24, 0x02	; 2
     56a:	85 bf       	out	0x35, r24	; 53
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	08 95       	ret
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	71 f0       	breq	.+28     	; 0x590 <EXT_INTx_setEdgeType+0x8a>
     574:	28 f0       	brcs	.+10     	; 0x580 <EXT_INTx_setEdgeType+0x7a>
     576:	82 30       	cpi	r24, 0x02	; 2
     578:	99 f0       	breq	.+38     	; 0x5a0 <EXT_INTx_setEdgeType+0x9a>
     57a:	83 30       	cpi	r24, 0x03	; 3
     57c:	c9 f0       	breq	.+50     	; 0x5b0 <EXT_INTx_setEdgeType+0xaa>
     57e:	37 c0       	rjmp	.+110    	; 0x5ee <EXT_INTx_setEdgeType+0xe8>
     580:	85 b7       	in	r24, 0x35	; 53
     582:	8b 7f       	andi	r24, 0xFB	; 251
     584:	85 bf       	out	0x35, r24	; 53
     586:	85 b7       	in	r24, 0x35	; 53
     588:	87 7f       	andi	r24, 0xF7	; 247
     58a:	85 bf       	out	0x35, r24	; 53
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	08 95       	ret
     590:	85 b7       	in	r24, 0x35	; 53
     592:	84 60       	ori	r24, 0x04	; 4
     594:	85 bf       	out	0x35, r24	; 53
     596:	85 b7       	in	r24, 0x35	; 53
     598:	87 7f       	andi	r24, 0xF7	; 247
     59a:	85 bf       	out	0x35, r24	; 53
     59c:	81 e0       	ldi	r24, 0x01	; 1
     59e:	08 95       	ret
     5a0:	85 b7       	in	r24, 0x35	; 53
     5a2:	8b 7f       	andi	r24, 0xFB	; 251
     5a4:	85 bf       	out	0x35, r24	; 53
     5a6:	85 b7       	in	r24, 0x35	; 53
     5a8:	88 60       	ori	r24, 0x08	; 8
     5aa:	85 bf       	out	0x35, r24	; 53
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	08 95       	ret
     5b0:	85 b7       	in	r24, 0x35	; 53
     5b2:	84 60       	ori	r24, 0x04	; 4
     5b4:	85 bf       	out	0x35, r24	; 53
     5b6:	85 b7       	in	r24, 0x35	; 53
     5b8:	88 60       	ori	r24, 0x08	; 8
     5ba:	85 bf       	out	0x35, r24	; 53
     5bc:	81 e0       	ldi	r24, 0x01	; 1
     5be:	08 95       	ret
     5c0:	82 30       	cpi	r24, 0x02	; 2
     5c2:	19 f0       	breq	.+6      	; 0x5ca <EXT_INTx_setEdgeType+0xc4>
     5c4:	83 30       	cpi	r24, 0x03	; 3
     5c6:	31 f0       	breq	.+12     	; 0x5d4 <EXT_INTx_setEdgeType+0xce>
     5c8:	14 c0       	rjmp	.+40     	; 0x5f2 <EXT_INTx_setEdgeType+0xec>
     5ca:	84 b7       	in	r24, 0x34	; 52
     5cc:	8f 7b       	andi	r24, 0xBF	; 191
     5ce:	84 bf       	out	0x34, r24	; 52
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	08 95       	ret
     5d4:	84 b7       	in	r24, 0x34	; 52
     5d6:	80 64       	ori	r24, 0x40	; 64
     5d8:	84 bf       	out	0x34, r24	; 52
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	08 95       	ret
     5de:	80 e0       	ldi	r24, 0x00	; 0
     5e0:	08 95       	ret
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	08 95       	ret
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	08 95       	ret
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	08 95       	ret
     5ee:	80 e0       	ldi	r24, 0x00	; 0
     5f0:	08 95       	ret
     5f2:	80 e0       	ldi	r24, 0x00	; 0
     5f4:	08 95       	ret

000005f6 <EXT_INTx_Init>:
     5f6:	1f 93       	push	r17
     5f8:	cf 93       	push	r28
     5fa:	df 93       	push	r29
     5fc:	00 d0       	rcall	.+0      	; 0x5fe <EXT_INTx_Init+0x8>
     5fe:	cd b7       	in	r28, 0x3d	; 61
     600:	de b7       	in	r29, 0x3e	; 62
     602:	00 97       	sbiw	r24, 0x00	; 0
     604:	09 f4       	brne	.+2      	; 0x608 <EXT_INTx_Init+0x12>
     606:	57 c0       	rjmp	.+174    	; 0x6b6 <EXT_INTx_Init+0xc0>
     608:	fc 01       	movw	r30, r24
     60a:	21 81       	ldd	r18, Z+1	; 0x01
     60c:	23 30       	cpi	r18, 0x03	; 3
     60e:	08 f0       	brcs	.+2      	; 0x612 <EXT_INTx_Init+0x1c>
     610:	54 c0       	rjmp	.+168    	; 0x6ba <EXT_INTx_Init+0xc4>
     612:	21 30       	cpi	r18, 0x01	; 1
     614:	e9 f0       	breq	.+58     	; 0x650 <EXT_INTx_Init+0x5a>
     616:	18 f0       	brcs	.+6      	; 0x61e <EXT_INTx_Init+0x28>
     618:	22 30       	cpi	r18, 0x02	; 2
     61a:	91 f1       	breq	.+100    	; 0x680 <EXT_INTx_Init+0x8a>
     61c:	4a c0       	rjmp	.+148    	; 0x6b2 <EXT_INTx_Init+0xbc>
     61e:	2b b7       	in	r18, 0x3b	; 59
     620:	2f 7b       	andi	r18, 0xBF	; 191
     622:	2b bf       	out	0x3b, r18	; 59
     624:	2a b7       	in	r18, 0x3a	; 58
     626:	20 64       	ori	r18, 0x40	; 64
     628:	2a bf       	out	0x3a, r18	; 58
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	80 81       	ld	r24, Z
     62e:	0e 94 83 02 	call	0x506	; 0x506 <EXT_INTx_setEdgeType>
     632:	18 2f       	mov	r17, r24
     634:	83 e0       	ldi	r24, 0x03	; 3
     636:	89 83       	std	Y+1, r24	; 0x01
     638:	82 e0       	ldi	r24, 0x02	; 2
     63a:	8a 83       	std	Y+2, r24	; 0x02
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	ce 01       	movw	r24, r28
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_pin_direction_intialize>
     646:	81 2b       	or	r24, r17
     648:	9b b7       	in	r25, 0x3b	; 59
     64a:	90 64       	ori	r25, 0x40	; 64
     64c:	9b bf       	out	0x3b, r25	; 59
     64e:	36 c0       	rjmp	.+108    	; 0x6bc <EXT_INTx_Init+0xc6>
     650:	2b b7       	in	r18, 0x3b	; 59
     652:	2f 77       	andi	r18, 0x7F	; 127
     654:	2b bf       	out	0x3b, r18	; 59
     656:	2a b7       	in	r18, 0x3a	; 58
     658:	20 68       	ori	r18, 0x80	; 128
     65a:	2a bf       	out	0x3a, r18	; 58
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	80 81       	ld	r24, Z
     660:	0e 94 83 02 	call	0x506	; 0x506 <EXT_INTx_setEdgeType>
     664:	18 2f       	mov	r17, r24
     666:	83 e0       	ldi	r24, 0x03	; 3
     668:	89 83       	std	Y+1, r24	; 0x01
     66a:	8a 83       	std	Y+2, r24	; 0x02
     66c:	60 e0       	ldi	r22, 0x00	; 0
     66e:	ce 01       	movw	r24, r28
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_pin_direction_intialize>
     676:	81 2b       	or	r24, r17
     678:	9b b7       	in	r25, 0x3b	; 59
     67a:	90 68       	ori	r25, 0x80	; 128
     67c:	9b bf       	out	0x3b, r25	; 59
     67e:	1e c0       	rjmp	.+60     	; 0x6bc <EXT_INTx_Init+0xc6>
     680:	2b b7       	in	r18, 0x3b	; 59
     682:	2f 7d       	andi	r18, 0xDF	; 223
     684:	2b bf       	out	0x3b, r18	; 59
     686:	2a b7       	in	r18, 0x3a	; 58
     688:	20 62       	ori	r18, 0x20	; 32
     68a:	2a bf       	out	0x3a, r18	; 58
     68c:	62 e0       	ldi	r22, 0x02	; 2
     68e:	80 81       	ld	r24, Z
     690:	0e 94 83 02 	call	0x506	; 0x506 <EXT_INTx_setEdgeType>
     694:	18 2f       	mov	r17, r24
     696:	88 b3       	in	r24, 0x18	; 24
     698:	89 83       	std	Y+1, r24	; 0x01
     69a:	82 e0       	ldi	r24, 0x02	; 2
     69c:	8a 83       	std	Y+2, r24	; 0x02
     69e:	60 e0       	ldi	r22, 0x00	; 0
     6a0:	ce 01       	movw	r24, r28
     6a2:	01 96       	adiw	r24, 0x01	; 1
     6a4:	0e 94 37 01 	call	0x26e	; 0x26e <DIO_pin_direction_intialize>
     6a8:	81 2b       	or	r24, r17
     6aa:	9b b7       	in	r25, 0x3b	; 59
     6ac:	90 62       	ori	r25, 0x20	; 32
     6ae:	9b bf       	out	0x3b, r25	; 59
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <EXT_INTx_Init+0xc6>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <EXT_INTx_Init+0xc6>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <EXT_INTx_Init+0xc6>
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	0f 90       	pop	r0
     6be:	0f 90       	pop	r0
     6c0:	df 91       	pop	r29
     6c2:	cf 91       	pop	r28
     6c4:	1f 91       	pop	r17
     6c6:	08 95       	ret

000006c8 <__vector_11>:
static timerCallBack sg_Timer0_callBackPtr = NULL;
static timerCallBack sg_Timer1_callBackPtr = NULL;
static timerCallBack sg_Timer2_callBackPtr = NULL;

ISR(TIMER0_OVF)
{
     6c8:	1f 92       	push	r1
     6ca:	0f 92       	push	r0
     6cc:	0f b6       	in	r0, 0x3f	; 63
     6ce:	0f 92       	push	r0
     6d0:	11 24       	eor	r1, r1
     6d2:	2f 93       	push	r18
     6d4:	3f 93       	push	r19
     6d6:	4f 93       	push	r20
     6d8:	5f 93       	push	r21
     6da:	6f 93       	push	r22
     6dc:	7f 93       	push	r23
     6de:	8f 93       	push	r24
     6e0:	9f 93       	push	r25
     6e2:	af 93       	push	r26
     6e4:	bf 93       	push	r27
     6e6:	ef 93       	push	r30
     6e8:	ff 93       	push	r31
	if(sg_Timer0_callBackPtr != NULL)
     6ea:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <sg_Timer0_callBackPtr>
     6ee:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <sg_Timer0_callBackPtr+0x1>
     6f2:	89 2b       	or	r24, r25
     6f4:	41 f0       	breq	.+16     	; 0x706 <__vector_11+0x3e>
	{
		// The timer0 overflow  occurred (must be cleared in software)
		CLEAR_BIT(TIFR,TOV0);
     6f6:	88 b7       	in	r24, 0x38	; 56
     6f8:	8e 7f       	andi	r24, 0xFE	; 254
     6fa:	88 bf       	out	0x38, r24	; 56
		//Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer0_callBackPtr)();
     6fc:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <sg_Timer0_callBackPtr>
     700:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <sg_Timer0_callBackPtr+0x1>
     704:	09 95       	icall
	}
}
     706:	ff 91       	pop	r31
     708:	ef 91       	pop	r30
     70a:	bf 91       	pop	r27
     70c:	af 91       	pop	r26
     70e:	9f 91       	pop	r25
     710:	8f 91       	pop	r24
     712:	7f 91       	pop	r23
     714:	6f 91       	pop	r22
     716:	5f 91       	pop	r21
     718:	4f 91       	pop	r20
     71a:	3f 91       	pop	r19
     71c:	2f 91       	pop	r18
     71e:	0f 90       	pop	r0
     720:	0f be       	out	0x3f, r0	; 63
     722:	0f 90       	pop	r0
     724:	1f 90       	pop	r1
     726:	18 95       	reti

00000728 <__vector_9>:

ISR(TIMER1_OVF)
{
     728:	1f 92       	push	r1
     72a:	0f 92       	push	r0
     72c:	0f b6       	in	r0, 0x3f	; 63
     72e:	0f 92       	push	r0
     730:	11 24       	eor	r1, r1
     732:	2f 93       	push	r18
     734:	3f 93       	push	r19
     736:	4f 93       	push	r20
     738:	5f 93       	push	r21
     73a:	6f 93       	push	r22
     73c:	7f 93       	push	r23
     73e:	8f 93       	push	r24
     740:	9f 93       	push	r25
     742:	af 93       	push	r26
     744:	bf 93       	push	r27
     746:	ef 93       	push	r30
     748:	ff 93       	push	r31
	if(sg_Timer1_callBackPtr != NULL)
     74a:	80 91 9e 00 	lds	r24, 0x009E	; 0x80009e <sg_Timer1_callBackPtr>
     74e:	90 91 9f 00 	lds	r25, 0x009F	; 0x80009f <sg_Timer1_callBackPtr+0x1>
     752:	89 2b       	or	r24, r25
     754:	41 f0       	breq	.+16     	; 0x766 <__vector_9+0x3e>
	{
		// The timer1 overflow  occurred (must be cleared in software)
		CLEAR_BIT(TIFR,TOV1);
     756:	88 b7       	in	r24, 0x38	; 56
     758:	8b 7f       	andi	r24, 0xFB	; 251
     75a:	88 bf       	out	0x38, r24	; 56
		// Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer1_callBackPtr)();
     75c:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <sg_Timer1_callBackPtr>
     760:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <sg_Timer1_callBackPtr+0x1>
     764:	09 95       	icall
		
	}
}
     766:	ff 91       	pop	r31
     768:	ef 91       	pop	r30
     76a:	bf 91       	pop	r27
     76c:	af 91       	pop	r26
     76e:	9f 91       	pop	r25
     770:	8f 91       	pop	r24
     772:	7f 91       	pop	r23
     774:	6f 91       	pop	r22
     776:	5f 91       	pop	r21
     778:	4f 91       	pop	r20
     77a:	3f 91       	pop	r19
     77c:	2f 91       	pop	r18
     77e:	0f 90       	pop	r0
     780:	0f be       	out	0x3f, r0	; 63
     782:	0f 90       	pop	r0
     784:	1f 90       	pop	r1
     786:	18 95       	reti

00000788 <__vector_5>:

ISR(TIMER2_OVF)
{
     788:	1f 92       	push	r1
     78a:	0f 92       	push	r0
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	0f 92       	push	r0
     790:	11 24       	eor	r1, r1
     792:	2f 93       	push	r18
     794:	3f 93       	push	r19
     796:	4f 93       	push	r20
     798:	5f 93       	push	r21
     79a:	6f 93       	push	r22
     79c:	7f 93       	push	r23
     79e:	8f 93       	push	r24
     7a0:	9f 93       	push	r25
     7a2:	af 93       	push	r26
     7a4:	bf 93       	push	r27
     7a6:	ef 93       	push	r30
     7a8:	ff 93       	push	r31
	if(sg_Timer2_callBackPtr != NULL)
     7aa:	80 91 9c 00 	lds	r24, 0x009C	; 0x80009c <sg_Timer2_callBackPtr>
     7ae:	90 91 9d 00 	lds	r25, 0x009D	; 0x80009d <sg_Timer2_callBackPtr+0x1>
     7b2:	89 2b       	or	r24, r25
     7b4:	41 f0       	breq	.+16     	; 0x7c6 <__vector_5+0x3e>
	{
		//The timer2 overflow  occurred (must be cleared in software) 
		CLEAR_BIT(TIFR,TOV2);
     7b6:	88 b7       	in	r24, 0x38	; 56
     7b8:	8f 7b       	andi	r24, 0xBF	; 191
     7ba:	88 bf       	out	0x38, r24	; 56
		//Call the Call Back function in the upper layer after the timer overflow
		(sg_Timer2_callBackPtr)();
     7bc:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <sg_Timer2_callBackPtr>
     7c0:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <sg_Timer2_callBackPtr+0x1>
     7c4:	09 95       	icall
	}
}
     7c6:	ff 91       	pop	r31
     7c8:	ef 91       	pop	r30
     7ca:	bf 91       	pop	r27
     7cc:	af 91       	pop	r26
     7ce:	9f 91       	pop	r25
     7d0:	8f 91       	pop	r24
     7d2:	7f 91       	pop	r23
     7d4:	6f 91       	pop	r22
     7d6:	5f 91       	pop	r21
     7d8:	4f 91       	pop	r20
     7da:	3f 91       	pop	r19
     7dc:	2f 91       	pop	r18
     7de:	0f 90       	pop	r0
     7e0:	0f be       	out	0x3f, r0	; 63
     7e2:	0f 90       	pop	r0
     7e4:	1f 90       	pop	r1
     7e6:	18 95       	reti

000007e8 <TIMER_init>:

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     7e8:	00 97       	sbiw	r24, 0x00	; 0
     7ea:	09 f4       	brne	.+2      	; 0x7ee <TIMER_init+0x6>
     7ec:	7c c0       	rjmp	.+248    	; 0x8e6 <__stack+0x87>
     7ee:	fc 01       	movw	r30, r24
     7f0:	20 81       	ld	r18, Z
     7f2:	23 30       	cpi	r18, 0x03	; 3
     7f4:	08 f0       	brcs	.+2      	; 0x7f8 <TIMER_init+0x10>
     7f6:	79 c0       	rjmp	.+242    	; 0x8ea <__stack+0x8b>
     7f8:	31 81       	ldd	r19, Z+1	; 0x01
     7fa:	3a 30       	cpi	r19, 0x0A	; 10
     7fc:	08 f0       	brcs	.+2      	; 0x800 <__DATA_REGION_LENGTH__>
     7fe:	77 c0       	rjmp	.+238    	; 0x8ee <__stack+0x8f>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
     800:	21 30       	cpi	r18, 0x01	; 1
     802:	19 f1       	breq	.+70     	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
     804:	20 f0       	brcs	.+8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     806:	22 30       	cpi	r18, 0x02	; 2
     808:	09 f4       	brne	.+2      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     80a:	50 c0       	rjmp	.+160    	; 0x8ac <__stack+0x4d>
     80c:	72 c0       	rjmp	.+228    	; 0x8f2 <__stack+0x93>
		{
			
			case TIMER_0:
				/*Clear registers of Timer0 before processing any of them*/
				CLEAR_REG(TCNT0);
     80e:	12 be       	out	0x32, r1	; 50
				CLEAR_REG(TCCR0);
     810:	13 be       	out	0x33, r1	; 51
				CLEAR_REG(OCR0);
     812:	1c be       	out	0x3c, r1	; 60
				/*Configure initial value in TCNT0 for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
     814:	fc 01       	movw	r30, r24
     816:	22 81       	ldd	r18, Z+2	; 0x02
     818:	22 bf       	out	0x32, r18	; 50
				
				/*Configure the TIMER0 with normal  mode value and enable the interrupt for this mode if interrupt feature activated */
				
				/*Make FOC0 to be Active as it is overflow mode(for non-PWM mode)*/
				SET_BIT(TCCR0,FOC0);
     81a:	23 b7       	in	r18, 0x33	; 51
     81c:	20 68       	ori	r18, 0x80	; 128
     81e:	23 bf       	out	0x33, r18	; 51
				/*Normal Overflow mode*/
				CLEAR_BIT(TCCR0,WGM00);
     820:	23 b7       	in	r18, 0x33	; 51
     822:	2f 7b       	andi	r18, 0xBF	; 191
     824:	23 bf       	out	0x33, r18	; 51
				CLEAR_BIT(TCCR0,WGM01);
     826:	23 b7       	in	r18, 0x33	; 51
     828:	27 7f       	andi	r18, 0xF7	; 247
     82a:	23 bf       	out	0x33, r18	; 51
				/*Normal port operation, OC0 disconnected*/
				CLEAR_BIT(TCCR0,COM00);
     82c:	23 b7       	in	r18, 0x33	; 51
     82e:	2f 7e       	andi	r18, 0xEF	; 239
     830:	23 bf       	out	0x33, r18	; 51
				CLEAR_BIT(TCCR0,COM01);
     832:	23 b7       	in	r18, 0x33	; 51
     834:	2f 7d       	andi	r18, 0xDF	; 223
     836:	23 bf       	out	0x33, r18	; 51
				if(TIMER_INTERRUPT_FEATURE_ENABLE==st_config->u8_timer_ovf_int_enable)
     838:	84 81       	ldd	r24, Z+4	; 0x04
     83a:	81 30       	cpi	r24, 0x01	; 1
     83c:	09 f0       	breq	.+2      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     83e:	5b c0       	rjmp	.+182    	; 0x8f6 <__stack+0x97>
				{
					/* Enable Timer0 overflow interrupt*/
					SET_BIT(TIMSK,TOIE0);
     840:	89 b7       	in	r24, 0x39	; 57
     842:	81 60       	ori	r24, 0x01	; 1
     844:	89 bf       	out	0x39, r24	; 57
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	08 95       	ret
				
				break;
			
			case TIMER_1:
				/*Clear registers of Timer1 before processing any of them*/
				CLEAR_REG(TCNT1L);
     84a:	1c bc       	out	0x2c, r1	; 44
				CLEAR_REG(TCNT1H);
     84c:	1d bc       	out	0x2d, r1	; 45
				CLEAR_REG(TCCR1A);
     84e:	1f bc       	out	0x2f, r1	; 47
				CLEAR_REG(TCCR1B);
     850:	1e bc       	out	0x2e, r1	; 46
				CLEAR_REG(OCR1AH);
     852:	1b bc       	out	0x2b, r1	; 43
				CLEAR_REG(OCR1AL);
     854:	1a bc       	out	0x2a, r1	; 42
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
     856:	fc 01       	movw	r30, r24
     858:	22 81       	ldd	r18, Z+2	; 0x02
     85a:	33 81       	ldd	r19, Z+3	; 0x03
     85c:	3d bd       	out	0x2d, r19	; 45
     85e:	2c bd       	out	0x2c, r18	; 44
				TCNT1H = (st_config->u16_timer_InitialValue >> 8) & U8_BIT_REG_MASK;*/
				#endif
				
				/*Configure the TIMER1 with normal  mode value and enable the interrupt for this mode if interrupt feature activated */
				/*Make FOC1A,FOC1B to be Active as it is overflow mode(for non-PWM mode)*/
				SET_BIT(TCCR1A,FOC1A);
     860:	2f b5       	in	r18, 0x2f	; 47
     862:	28 60       	ori	r18, 0x08	; 8
     864:	2f bd       	out	0x2f, r18	; 47
				SET_BIT(TCCR1A,FOC1B);
     866:	2f b5       	in	r18, 0x2f	; 47
     868:	24 60       	ori	r18, 0x04	; 4
     86a:	2f bd       	out	0x2f, r18	; 47
				/*Normal Overflow mode*/
				CLEAR_BIT(TCCR1A,WGM10);
     86c:	2f b5       	in	r18, 0x2f	; 47
     86e:	2e 7f       	andi	r18, 0xFE	; 254
     870:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,WGM11);
     872:	2f b5       	in	r18, 0x2f	; 47
     874:	2d 7f       	andi	r18, 0xFD	; 253
     876:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1B,WGM12);
     878:	2e b5       	in	r18, 0x2e	; 46
     87a:	2f 7e       	andi	r18, 0xEF	; 239
     87c:	2e bd       	out	0x2e, r18	; 46
				CLEAR_BIT(TCCR1B,WGM13);
     87e:	2e b5       	in	r18, 0x2e	; 46
     880:	27 7f       	andi	r18, 0xF7	; 247
     882:	2e bd       	out	0x2e, r18	; 46
				/*Normal port operation, OC1A/OC1B disconnected.*/
				CLEAR_BIT(TCCR1A,COM1A0);
     884:	2f b5       	in	r18, 0x2f	; 47
     886:	2f 7b       	andi	r18, 0xBF	; 191
     888:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,COM1A1);
     88a:	2f b5       	in	r18, 0x2f	; 47
     88c:	2f 77       	andi	r18, 0x7F	; 127
     88e:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,COM1B0);
     890:	2f b5       	in	r18, 0x2f	; 47
     892:	2f 7e       	andi	r18, 0xEF	; 239
     894:	2f bd       	out	0x2f, r18	; 47
				CLEAR_BIT(TCCR1A,COM1B1);
     896:	2f b5       	in	r18, 0x2f	; 47
     898:	2f 7d       	andi	r18, 0xDF	; 223
     89a:	2f bd       	out	0x2f, r18	; 47
				
				if(TIMER_INTERRUPT_FEATURE_ENABLE==st_config->u8_timer_ovf_int_enable)
     89c:	84 81       	ldd	r24, Z+4	; 0x04
     89e:	81 30       	cpi	r24, 0x01	; 1
     8a0:	61 f5       	brne	.+88     	; 0x8fa <__stack+0x9b>
				{
					/* Enable Timer1 overflow interrupt*/
					//TIMSK |= 1<<TOIE1;
					SET_BIT(TIMSK,TOIE1);
     8a2:	89 b7       	in	r24, 0x39	; 57
     8a4:	84 60       	ori	r24, 0x04	; 4
     8a6:	89 bf       	out	0x39, r24	; 57
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     8a8:	80 e0       	ldi	r24, 0x00	; 0
     8aa:	08 95       	ret
				
				break;
			
			case TIMER_2:
				/*Clear registers of Timer2 before processing any of them*/
				CLEAR_REG(TCNT2);
     8ac:	14 bc       	out	0x24, r1	; 36
				CLEAR_REG(TCCR2);
     8ae:	15 bc       	out	0x25, r1	; 37
				CLEAR_REG(OCR2);
     8b0:	13 bc       	out	0x23, r1	; 35
				/*Configure initial value in TCNT for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue & U8_BIT_REG_MASK;
     8b2:	fc 01       	movw	r30, r24
     8b4:	22 81       	ldd	r18, Z+2	; 0x02
     8b6:	24 bd       	out	0x24, r18	; 36
				/*Configure the TIMER2 with normal  mode value and enable the interrupt for this mode if interrupt feature activated */
				/*Make FOC2 to be Active as it is overflow mode(for non-PWM mode)*/
				SET_BIT(TCCR2,FOC2);
     8b8:	25 b5       	in	r18, 0x25	; 37
     8ba:	20 68       	ori	r18, 0x80	; 128
     8bc:	25 bd       	out	0x25, r18	; 37
				/*Normal Overflow mode*/
				CLEAR_BIT(TCCR2,WGM20);
     8be:	25 b5       	in	r18, 0x25	; 37
     8c0:	2f 7b       	andi	r18, 0xBF	; 191
     8c2:	25 bd       	out	0x25, r18	; 37
				CLEAR_BIT(TCCR2,WGM21);
     8c4:	25 b5       	in	r18, 0x25	; 37
     8c6:	27 7f       	andi	r18, 0xF7	; 247
     8c8:	25 bd       	out	0x25, r18	; 37
				/*Normal port operation, OC2 disconnected*/
				CLEAR_BIT(TCCR2,COM20);
     8ca:	25 b5       	in	r18, 0x25	; 37
     8cc:	2f 7e       	andi	r18, 0xEF	; 239
     8ce:	25 bd       	out	0x25, r18	; 37
				CLEAR_BIT(TCCR2,COM21);
     8d0:	25 b5       	in	r18, 0x25	; 37
     8d2:	2f 7d       	andi	r18, 0xDF	; 223
     8d4:	25 bd       	out	0x25, r18	; 37
				if(TIMER_INTERRUPT_FEATURE_ENABLE==st_config->u8_timer_ovf_int_enable)
     8d6:	84 81       	ldd	r24, Z+4	; 0x04
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	89 f4       	brne	.+34     	; 0x8fe <__stack+0x9f>
				{
					/* Enable Timer2 overflow interrupt*/
					SET_BIT(TIMSK,TOIE2);
     8dc:	89 b7       	in	r24, 0x39	; 57
     8de:	80 64       	ori	r24, 0x40	; 64
     8e0:	89 bf       	out	0x39, r24	; 57
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
     8e4:	08 95       	ret
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     8e6:	83 e0       	ldi	r24, 0x03	; 3
     8e8:	08 95       	ret
     8ea:	83 e0       	ldi	r24, 0x03	; 3
     8ec:	08 95       	ret
     8ee:	83 e0       	ldi	r24, 0x03	; 3
     8f0:	08 95       	ret
				}
				
				break;
			
			default:
				l_ret |= TIMER_E_NOT_OK;
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	08 95       	ret
	}
}

u8_en_timerErrorsType TIMER_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	08 95       	ret
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	08 95       	ret
     8fe:	80 e0       	ldi	r24, 0x00	; 0
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     900:	08 95       	ret

00000902 <TIMER_start>:
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     902:	00 97       	sbiw	r24, 0x00	; 0
     904:	09 f4       	brne	.+2      	; 0x908 <TIMER_start+0x6>
     906:	3b c1       	rjmp	.+630    	; 0xb7e <TIMER_start+0x27c>
     908:	dc 01       	movw	r26, r24
     90a:	2c 91       	ld	r18, X
     90c:	23 30       	cpi	r18, 0x03	; 3
     90e:	08 f0       	brcs	.+2      	; 0x912 <TIMER_start+0x10>
     910:	38 c1       	rjmp	.+624    	; 0xb82 <TIMER_start+0x280>
     912:	11 96       	adiw	r26, 0x01	; 1
     914:	ec 91       	ld	r30, X
     916:	ea 30       	cpi	r30, 0x0A	; 10
     918:	08 f0       	brcs	.+2      	; 0x91c <TIMER_start+0x1a>
     91a:	35 c1       	rjmp	.+618    	; 0xb86 <TIMER_start+0x284>
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		/*Configure the TIMER Pres-scaler value for Timer-x clock*/
		switch(st_config->u8_timerNum)
     91c:	21 30       	cpi	r18, 0x01	; 1
     91e:	09 f4       	brne	.+2      	; 0x922 <TIMER_start+0x20>
     920:	68 c0       	rjmp	.+208    	; 0x9f2 <TIMER_start+0xf0>
     922:	20 f0       	brcs	.+8      	; 0x92c <TIMER_start+0x2a>
     924:	22 30       	cpi	r18, 0x02	; 2
     926:	09 f4       	brne	.+2      	; 0x92a <TIMER_start+0x28>
     928:	c7 c0       	rjmp	.+398    	; 0xab8 <TIMER_start+0x1b6>
     92a:	2f c1       	rjmp	.+606    	; 0xb8a <TIMER_start+0x288>
		{
			case TIMER_0:
				switch(st_config->u8_timerClock)
     92c:	8e 2f       	mov	r24, r30
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	8a 30       	cpi	r24, 0x0A	; 10
     932:	91 05       	cpc	r25, r1
     934:	08 f0       	brcs	.+2      	; 0x938 <TIMER_start+0x36>
     936:	2b c1       	rjmp	.+598    	; 0xb8e <TIMER_start+0x28c>
     938:	fc 01       	movw	r30, r24
     93a:	e6 5d       	subi	r30, 0xD6	; 214
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__tablejump2__>
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR0,CS00);
     942:	83 b7       	in	r24, 0x33	; 51
     944:	8e 7f       	andi	r24, 0xFE	; 254
     946:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     948:	83 b7       	in	r24, 0x33	; 51
     94a:	8d 7f       	andi	r24, 0xFD	; 253
     94c:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     94e:	83 b7       	in	r24, 0x33	; 51
     950:	8b 7f       	andi	r24, 0xFB	; 251
     952:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     954:	80 e0       	ldi	r24, 0x00	; 0
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     956:	08 95       	ret
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR0,CS00);
     958:	83 b7       	in	r24, 0x33	; 51
     95a:	81 60       	ori	r24, 0x01	; 1
     95c:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     95e:	83 b7       	in	r24, 0x33	; 51
     960:	8d 7f       	andi	r24, 0xFD	; 253
     962:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     964:	83 b7       	in	r24, 0x33	; 51
     966:	8b 7f       	andi	r24, 0xFB	; 251
     968:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     96a:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     96c:	08 95       	ret
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR0,CS00);
     96e:	83 b7       	in	r24, 0x33	; 51
     970:	8e 7f       	andi	r24, 0xFE	; 254
     972:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     974:	83 b7       	in	r24, 0x33	; 51
     976:	82 60       	ori	r24, 0x02	; 2
     978:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     97a:	83 b7       	in	r24, 0x33	; 51
     97c:	8b 7f       	andi	r24, 0xFB	; 251
     97e:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     980:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     982:	08 95       	ret
					case TIMER_F_CPU_64:
						SET_BIT(TCCR0,CS00);
     984:	83 b7       	in	r24, 0x33	; 51
     986:	81 60       	ori	r24, 0x01	; 1
     988:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     98a:	83 b7       	in	r24, 0x33	; 51
     98c:	82 60       	ori	r24, 0x02	; 2
     98e:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS02);
     990:	83 b7       	in	r24, 0x33	; 51
     992:	8b 7f       	andi	r24, 0xFB	; 251
     994:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     996:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_64:
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						CLEAR_BIT(TCCR0,CS02);
						break;
     998:	08 95       	ret
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR0,CS00);
     99a:	83 b7       	in	r24, 0x33	; 51
     99c:	8e 7f       	andi	r24, 0xFE	; 254
     99e:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     9a0:	83 b7       	in	r24, 0x33	; 51
     9a2:	8d 7f       	andi	r24, 0xFD	; 253
     9a4:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
     9a6:	83 b7       	in	r24, 0x33	; 51
     9a8:	84 60       	ori	r24, 0x04	; 4
     9aa:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9ac:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
     9ae:	08 95       	ret
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR0,CS00);
     9b0:	83 b7       	in	r24, 0x33	; 51
     9b2:	81 60       	ori	r24, 0x01	; 1
     9b4:	83 bf       	out	0x33, r24	; 51
						CLEAR_BIT(TCCR0,CS01);
     9b6:	83 b7       	in	r24, 0x33	; 51
     9b8:	8d 7f       	andi	r24, 0xFD	; 253
     9ba:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);	
     9bc:	83 b7       	in	r24, 0x33	; 51
     9be:	84 60       	ori	r24, 0x04	; 4
     9c0:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9c2:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR0,CS00);
						CLEAR_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);	
						break;
     9c4:	08 95       	ret
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR0,CS00);
     9c6:	83 b7       	in	r24, 0x33	; 51
     9c8:	8e 7f       	andi	r24, 0xFE	; 254
     9ca:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     9cc:	83 b7       	in	r24, 0x33	; 51
     9ce:	82 60       	ori	r24, 0x02	; 2
     9d0:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
     9d2:	83 b7       	in	r24, 0x33	; 51
     9d4:	84 60       	ori	r24, 0x04	; 4
     9d6:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9d8:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
     9da:	08 95       	ret
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR0,CS00);
     9dc:	83 b7       	in	r24, 0x33	; 51
     9de:	81 60       	ori	r24, 0x01	; 1
     9e0:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS01);
     9e2:	83 b7       	in	r24, 0x33	; 51
     9e4:	82 60       	ori	r24, 0x02	; 2
     9e6:	83 bf       	out	0x33, r24	; 51
						SET_BIT(TCCR0,CS02);
     9e8:	83 b7       	in	r24, 0x33	; 51
     9ea:	84 60       	ori	r24, 0x04	; 4
     9ec:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     9ee:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
     9f0:	08 95       	ret
						break;
				}
				break;
				
			case TIMER_1:
				switch(st_config->u8_timerClock)
     9f2:	8e 2f       	mov	r24, r30
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	8a 30       	cpi	r24, 0x0A	; 10
     9f8:	91 05       	cpc	r25, r1
     9fa:	08 f0       	brcs	.+2      	; 0x9fe <TIMER_start+0xfc>
     9fc:	ca c0       	rjmp	.+404    	; 0xb92 <TIMER_start+0x290>
     9fe:	fc 01       	movw	r30, r24
     a00:	ec 5c       	subi	r30, 0xCC	; 204
     a02:	ff 4f       	sbci	r31, 0xFF	; 255
     a04:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__tablejump2__>
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR1B,CS10);
     a08:	8e b5       	in	r24, 0x2e	; 46
     a0a:	8e 7f       	andi	r24, 0xFE	; 254
     a0c:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     a0e:	8e b5       	in	r24, 0x2e	; 46
     a10:	8d 7f       	andi	r24, 0xFD	; 253
     a12:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a14:	8e b5       	in	r24, 0x2e	; 46
     a16:	8b 7f       	andi	r24, 0xFB	; 251
     a18:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a1a:	80 e0       	ldi	r24, 0x00	; 0
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a1c:	08 95       	ret
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR1B,CS10);
     a1e:	8e b5       	in	r24, 0x2e	; 46
     a20:	81 60       	ori	r24, 0x01	; 1
     a22:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     a24:	8e b5       	in	r24, 0x2e	; 46
     a26:	8d 7f       	andi	r24, 0xFD	; 253
     a28:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a2a:	8e b5       	in	r24, 0x2e	; 46
     a2c:	8b 7f       	andi	r24, 0xFB	; 251
     a2e:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a30:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a32:	08 95       	ret
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR1B,CS10);
     a34:	8e b5       	in	r24, 0x2e	; 46
     a36:	8e 7f       	andi	r24, 0xFE	; 254
     a38:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     a3a:	8e b5       	in	r24, 0x2e	; 46
     a3c:	82 60       	ori	r24, 0x02	; 2
     a3e:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a40:	8e b5       	in	r24, 0x2e	; 46
     a42:	8b 7f       	andi	r24, 0xFB	; 251
     a44:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a46:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a48:	08 95       	ret
					case TIMER_F_CPU_64:
						SET_BIT(TCCR1B,CS10);
     a4a:	8e b5       	in	r24, 0x2e	; 46
     a4c:	81 60       	ori	r24, 0x01	; 1
     a4e:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     a50:	8e b5       	in	r24, 0x2e	; 46
     a52:	82 60       	ori	r24, 0x02	; 2
     a54:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS12);
     a56:	8e b5       	in	r24, 0x2e	; 46
     a58:	8b 7f       	andi	r24, 0xFB	; 251
     a5a:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a5c:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_64:
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						CLEAR_BIT(TCCR1B,CS12);
						break;
     a5e:	08 95       	ret
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR1B,CS10);
     a60:	8e b5       	in	r24, 0x2e	; 46
     a62:	8e 7f       	andi	r24, 0xFE	; 254
     a64:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     a66:	8e b5       	in	r24, 0x2e	; 46
     a68:	8d 7f       	andi	r24, 0xFD	; 253
     a6a:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
     a6c:	8e b5       	in	r24, 0x2e	; 46
     a6e:	84 60       	ori	r24, 0x04	; 4
     a70:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a72:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
     a74:	08 95       	ret
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR1B,CS10);
     a76:	8e b5       	in	r24, 0x2e	; 46
     a78:	81 60       	ori	r24, 0x01	; 1
     a7a:	8e bd       	out	0x2e, r24	; 46
						CLEAR_BIT(TCCR1B,CS11);
     a7c:	8e b5       	in	r24, 0x2e	; 46
     a7e:	8d 7f       	andi	r24, 0xFD	; 253
     a80:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);	
     a82:	8e b5       	in	r24, 0x2e	; 46
     a84:	84 60       	ori	r24, 0x04	; 4
     a86:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a88:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR1B,CS10);
						CLEAR_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);	
						break;
     a8a:	08 95       	ret
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR1B,CS10);
     a8c:	8e b5       	in	r24, 0x2e	; 46
     a8e:	8e 7f       	andi	r24, 0xFE	; 254
     a90:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     a92:	8e b5       	in	r24, 0x2e	; 46
     a94:	82 60       	ori	r24, 0x02	; 2
     a96:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
     a98:	8e b5       	in	r24, 0x2e	; 46
     a9a:	84 60       	ori	r24, 0x04	; 4
     a9c:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     a9e:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_FALLING_EDGE:
						CLEAR_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
     aa0:	08 95       	ret
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR1B,CS10);
     aa2:	8e b5       	in	r24, 0x2e	; 46
     aa4:	81 60       	ori	r24, 0x01	; 1
     aa6:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS11);
     aa8:	8e b5       	in	r24, 0x2e	; 46
     aaa:	82 60       	ori	r24, 0x02	; 2
     aac:	8e bd       	out	0x2e, r24	; 46
						SET_BIT(TCCR1B,CS12);
     aae:	8e b5       	in	r24, 0x2e	; 46
     ab0:	84 60       	ori	r24, 0x04	; 4
     ab2:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     ab4:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_EXTERNAL_CLK_RISING_EDGE:
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
     ab6:	08 95       	ret
						break;
				}			
				break;
				
			case TIMER_2:
				switch(st_config->u8_timerClock)
     ab8:	8e 2f       	mov	r24, r30
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	88 30       	cpi	r24, 0x08	; 8
     abe:	91 05       	cpc	r25, r1
     ac0:	08 f0       	brcs	.+2      	; 0xac4 <TIMER_start+0x1c2>
     ac2:	69 c0       	rjmp	.+210    	; 0xb96 <TIMER_start+0x294>
     ac4:	fc 01       	movw	r30, r24
     ac6:	e2 5c       	subi	r30, 0xC2	; 194
     ac8:	ff 4f       	sbci	r31, 0xFF	; 255
     aca:	0c 94 3b 08 	jmp	0x1076	; 0x1076 <__tablejump2__>
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR2,CS20);
     ace:	85 b5       	in	r24, 0x25	; 37
     ad0:	8b 7f       	andi	r24, 0xFB	; 251
     ad2:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     ad4:	85 b5       	in	r24, 0x25	; 37
     ad6:	8d 7f       	andi	r24, 0xFD	; 253
     ad8:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     ada:	85 b5       	in	r24, 0x25	; 37
     adc:	8e 7f       	andi	r24, 0xFE	; 254
     ade:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     ae0:	80 e0       	ldi	r24, 0x00	; 0
				{
					case TIMER_NO_CLOCK:
						CLEAR_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     ae2:	08 95       	ret
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR2,CS20);
     ae4:	85 b5       	in	r24, 0x25	; 37
     ae6:	84 60       	ori	r24, 0x04	; 4
     ae8:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     aea:	85 b5       	in	r24, 0x25	; 37
     aec:	8d 7f       	andi	r24, 0xFD	; 253
     aee:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     af0:	85 b5       	in	r24, 0x25	; 37
     af2:	8e 7f       	andi	r24, 0xFE	; 254
     af4:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     af6:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_CLOCK:
						SET_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     af8:	08 95       	ret
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR2,CS20);
     afa:	85 b5       	in	r24, 0x25	; 37
     afc:	8b 7f       	andi	r24, 0xFB	; 251
     afe:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     b00:	85 b5       	in	r24, 0x25	; 37
     b02:	82 60       	ori	r24, 0x02	; 2
     b04:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     b06:	85 b5       	in	r24, 0x25	; 37
     b08:	8e 7f       	andi	r24, 0xFE	; 254
     b0a:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b0c:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_8:
						CLEAR_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     b0e:	08 95       	ret
					case TIMER_F_CPU_32:
						SET_BIT(TCCR2,CS20);
     b10:	85 b5       	in	r24, 0x25	; 37
     b12:	84 60       	ori	r24, 0x04	; 4
     b14:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     b16:	85 b5       	in	r24, 0x25	; 37
     b18:	82 60       	ori	r24, 0x02	; 2
     b1a:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS22);
     b1c:	85 b5       	in	r24, 0x25	; 37
     b1e:	8e 7f       	andi	r24, 0xFE	; 254
     b20:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b22:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_32:
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						CLEAR_BIT(TCCR2,CS22);
						break;
     b24:	08 95       	ret
					case TIMER_F_CPU_64:
						CLEAR_BIT(TCCR2,CS20);
     b26:	85 b5       	in	r24, 0x25	; 37
     b28:	8b 7f       	andi	r24, 0xFB	; 251
     b2a:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     b2c:	85 b5       	in	r24, 0x25	; 37
     b2e:	8d 7f       	andi	r24, 0xFD	; 253
     b30:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
     b32:	85 b5       	in	r24, 0x25	; 37
     b34:	81 60       	ori	r24, 0x01	; 1
     b36:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b38:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_64:
						CLEAR_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
     b3a:	08 95       	ret
					case TIMER_F_CPU_128:
						SET_BIT(TCCR2,CS20);
     b3c:	85 b5       	in	r24, 0x25	; 37
     b3e:	84 60       	ori	r24, 0x04	; 4
     b40:	85 bd       	out	0x25, r24	; 37
						CLEAR_BIT(TCCR2,CS21);
     b42:	85 b5       	in	r24, 0x25	; 37
     b44:	8d 7f       	andi	r24, 0xFD	; 253
     b46:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
     b48:	85 b5       	in	r24, 0x25	; 37
     b4a:	81 60       	ori	r24, 0x01	; 1
     b4c:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b4e:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_128:
						SET_BIT(TCCR2,CS20);
						CLEAR_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
     b50:	08 95       	ret
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR2,CS20);
     b52:	85 b5       	in	r24, 0x25	; 37
     b54:	8b 7f       	andi	r24, 0xFB	; 251
     b56:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     b58:	85 b5       	in	r24, 0x25	; 37
     b5a:	82 60       	ori	r24, 0x02	; 2
     b5c:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);
     b5e:	85 b5       	in	r24, 0x25	; 37
     b60:	81 60       	ori	r24, 0x01	; 1
     b62:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b64:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_256:
						CLEAR_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);
						break;
     b66:	08 95       	ret
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR2,CS20);
     b68:	85 b5       	in	r24, 0x25	; 37
     b6a:	84 60       	ori	r24, 0x04	; 4
     b6c:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS21);
     b6e:	85 b5       	in	r24, 0x25	; 37
     b70:	82 60       	ori	r24, 0x02	; 2
     b72:	85 bd       	out	0x25, r24	; 37
						SET_BIT(TCCR2,CS22);	
     b74:	85 b5       	in	r24, 0x25	; 37
     b76:	81 60       	ori	r24, 0x01	; 1
     b78:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     b7a:	80 e0       	ldi	r24, 0x00	; 0
						break;
					case TIMER_F_CPU_1024:
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);	
						break;
     b7c:	08 95       	ret
u8_en_timerErrorsType TIMER_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     b7e:	83 e0       	ldi	r24, 0x03	; 3
     b80:	08 95       	ret
     b82:	83 e0       	ldi	r24, 0x03	; 3
     b84:	08 95       	ret
     b86:	83 e0       	ldi	r24, 0x03	; 3
     b88:	08 95       	ret
						break;
				}
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
     b8a:	83 e0       	ldi	r24, 0x03	; 3
     b8c:	08 95       	ret
						SET_BIT(TCCR0,CS00);
						SET_BIT(TCCR0,CS01);
						SET_BIT(TCCR0,CS02);
						break;
					default:
						l_ret = TIMER_E_NOT_OK;
     b8e:	83 e0       	ldi	r24, 0x03	; 3
     b90:	08 95       	ret
						SET_BIT(TCCR1B,CS10);
						SET_BIT(TCCR1B,CS11);
						SET_BIT(TCCR1B,CS12);
						break;
					default:
						l_ret = TIMER_E_NOT_OK;
     b92:	83 e0       	ldi	r24, 0x03	; 3
     b94:	08 95       	ret
						SET_BIT(TCCR2,CS20);
						SET_BIT(TCCR2,CS21);
						SET_BIT(TCCR2,CS22);	
						break;
					default:
						l_ret = TIMER_E_NOT_OK;
     b96:	83 e0       	ldi	r24, 0x03	; 3
				l_ret |= TIMER_E_NOT_OK;
				break;
		}
	}
	return l_ret;
}
     b98:	08 95       	ret

00000b9a <TIMER_stop>:
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_a_timerNum >= TIMER_INVALID_NUM )
     b9a:	83 30       	cpi	r24, 0x03	; 3
     b9c:	38 f5       	brcc	.+78     	; 0xbec <TIMER_stop+0x52>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
     b9e:	81 30       	cpi	r24, 0x01	; 1
     ba0:	79 f0       	breq	.+30     	; 0xbc0 <TIMER_stop+0x26>
     ba2:	18 f0       	brcs	.+6      	; 0xbaa <TIMER_stop+0x10>
     ba4:	82 30       	cpi	r24, 0x02	; 2
     ba6:	b9 f0       	breq	.+46     	; 0xbd6 <TIMER_stop+0x3c>
     ba8:	23 c0       	rjmp	.+70     	; 0xbf0 <TIMER_stop+0x56>
		{
			case TIMER_0:
				/*use no clock to halt timer0*/
				CLEAR_BIT(TCCR0,CS00);
     baa:	83 b7       	in	r24, 0x33	; 51
     bac:	8e 7f       	andi	r24, 0xFE	; 254
     bae:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS01);
     bb0:	83 b7       	in	r24, 0x33	; 51
     bb2:	8d 7f       	andi	r24, 0xFD	; 253
     bb4:	83 bf       	out	0x33, r24	; 51
				CLEAR_BIT(TCCR0,CS02);
     bb6:	83 b7       	in	r24, 0x33	; 51
     bb8:	8b 7f       	andi	r24, 0xFB	; 251
     bba:	83 bf       	out	0x33, r24	; 51
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     bbc:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_0:
				/*use no clock to halt timer0*/
				CLEAR_BIT(TCCR0,CS00);
				CLEAR_BIT(TCCR0,CS01);
				CLEAR_BIT(TCCR0,CS02);
				break;
     bbe:	08 95       	ret
				
			case TIMER_1:
				/*use no clock to halt timer1*/
				CLEAR_BIT(TCCR1B,CS10);
     bc0:	8e b5       	in	r24, 0x2e	; 46
     bc2:	8e 7f       	andi	r24, 0xFE	; 254
     bc4:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS11);
     bc6:	8e b5       	in	r24, 0x2e	; 46
     bc8:	8d 7f       	andi	r24, 0xFD	; 253
     bca:	8e bd       	out	0x2e, r24	; 46
				CLEAR_BIT(TCCR1B,CS12);
     bcc:	8e b5       	in	r24, 0x2e	; 46
     bce:	8b 7f       	andi	r24, 0xFB	; 251
     bd0:	8e bd       	out	0x2e, r24	; 46
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     bd2:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_1:
				/*use no clock to halt timer1*/
				CLEAR_BIT(TCCR1B,CS10);
				CLEAR_BIT(TCCR1B,CS11);
				CLEAR_BIT(TCCR1B,CS12);
				break;
     bd4:	08 95       	ret
				
			case TIMER_2:
				/*use no clock to halt timer2*/
				CLEAR_BIT(TCCR2,CS20);
     bd6:	85 b5       	in	r24, 0x25	; 37
     bd8:	8b 7f       	andi	r24, 0xFB	; 251
     bda:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS21);
     bdc:	85 b5       	in	r24, 0x25	; 37
     bde:	8d 7f       	andi	r24, 0xFD	; 253
     be0:	85 bd       	out	0x25, r24	; 37
				CLEAR_BIT(TCCR2,CS22);
     be2:	85 b5       	in	r24, 0x25	; 37
     be4:	8e 7f       	andi	r24, 0xFE	; 254
     be6:	85 bd       	out	0x25, r24	; 37
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     be8:	80 e0       	ldi	r24, 0x00	; 0
			case TIMER_2:
				/*use no clock to halt timer2*/
				CLEAR_BIT(TCCR2,CS20);
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
     bea:	08 95       	ret
u8_en_timerErrorsType TIMER_stop (u8_en_timerNumberType u8_a_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	08 95       	ret
				CLEAR_BIT(TCCR2,CS21);
				CLEAR_BIT(TCCR2,CS22);
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
     bf0:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
     bf2:	08 95       	ret

00000bf4 <TIMER_reset>:

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     bf4:	00 97       	sbiw	r24, 0x00	; 0
     bf6:	f1 f0       	breq	.+60     	; 0xc34 <TIMER_reset+0x40>
     bf8:	fc 01       	movw	r30, r24
     bfa:	20 81       	ld	r18, Z
     bfc:	23 30       	cpi	r18, 0x03	; 3
     bfe:	e0 f4       	brcc	.+56     	; 0xc38 <TIMER_reset+0x44>
     c00:	31 81       	ldd	r19, Z+1	; 0x01
     c02:	3a 30       	cpi	r19, 0x0A	; 10
     c04:	d8 f4       	brcc	.+54     	; 0xc3c <TIMER_reset+0x48>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(st_config->u8_timerNum)
     c06:	21 30       	cpi	r18, 0x01	; 1
     c08:	49 f0       	breq	.+18     	; 0xc1c <TIMER_reset+0x28>
     c0a:	18 f0       	brcs	.+6      	; 0xc12 <TIMER_reset+0x1e>
     c0c:	22 30       	cpi	r18, 0x02	; 2
     c0e:	69 f0       	breq	.+26     	; 0xc2a <TIMER_reset+0x36>
     c10:	17 c0       	rjmp	.+46     	; 0xc40 <TIMER_reset+0x4c>
		{
			case TIMER_0:
				
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue;
     c12:	fc 01       	movw	r30, r24
     c14:	82 81       	ldd	r24, Z+2	; 0x02
     c16:	82 bf       	out	0x32, r24	; 50
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c18:	80 e0       	ldi	r24, 0x00	; 0
		{
			case TIMER_0:
				
				/*Configure initial value in TCNT1(high&low) for Timer0 to start count from it*/
				TCNT0 = st_config->u16_timer_InitialValue;
				break;
     c1a:	08 95       	ret
				
			case TIMER_1:
			
				/*Configure initial value in TCNT1(high&low) for Timer1 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
     c1c:	fc 01       	movw	r30, r24
     c1e:	82 81       	ldd	r24, Z+2	; 0x02
     c20:	93 81       	ldd	r25, Z+3	; 0x03
     c22:	9d bd       	out	0x2d, r25	; 45
     c24:	8c bd       	out	0x2c, r24	; 44
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c26:	80 e0       	ldi	r24, 0x00	; 0
				
			case TIMER_1:
			
				/*Configure initial value in TCNT1(high&low) for Timer1 to start count from it*/
				TCNT1 = st_config->u16_timer_InitialValue;
				break;
     c28:	08 95       	ret
				
			case TIMER_2:
				
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
     c2a:	fc 01       	movw	r30, r24
     c2c:	82 81       	ldd	r24, Z+2	; 0x02
     c2e:	84 bd       	out	0x24, r24	; 36
	return l_ret;
}

u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c30:	80 e0       	ldi	r24, 0x00	; 0
				
			case TIMER_2:
				
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
				break;
     c32:	08 95       	ret
u8_en_timerErrorsType TIMER_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
     c34:	83 e0       	ldi	r24, 0x03	; 3
     c36:	08 95       	ret
     c38:	83 e0       	ldi	r24, 0x03	; 3
     c3a:	08 95       	ret
     c3c:	83 e0       	ldi	r24, 0x03	; 3
     c3e:	08 95       	ret
				/*Configure initial value in TCNT1(high&low) for Timer2 to start count from it*/
				TCNT2 = st_config->u16_timer_InitialValue;
				break;
				
			default:
				l_ret |= TIMER_E_NOT_OK;
     c40:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
}
     c42:	08 95       	ret

00000c44 <TIMER_setCallBack>:
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
     c44:	00 97       	sbiw	r24, 0x00	; 0
     c46:	d1 f0       	breq	.+52     	; 0xc7c <TIMER_setCallBack+0x38>
     c48:	63 30       	cpi	r22, 0x03	; 3
     c4a:	d0 f4       	brcc	.+52     	; 0xc80 <TIMER_setCallBack+0x3c>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		switch(u8_a_timerNum)
     c4c:	61 30       	cpi	r22, 0x01	; 1
     c4e:	51 f0       	breq	.+20     	; 0xc64 <TIMER_setCallBack+0x20>
     c50:	18 f0       	brcs	.+6      	; 0xc58 <TIMER_setCallBack+0x14>
     c52:	62 30       	cpi	r22, 0x02	; 2
     c54:	69 f0       	breq	.+26     	; 0xc70 <TIMER_setCallBack+0x2c>
     c56:	16 c0       	rjmp	.+44     	; 0xc84 <TIMER_setCallBack+0x40>
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
     c58:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <sg_Timer0_callBackPtr+0x1>
     c5c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <sg_Timer0_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c60:	80 e0       	ldi	r24, 0x00	; 0
		switch(u8_a_timerNum)
		{
			case TIMER_0:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
     c62:	08 95       	ret
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
     c64:	90 93 9f 00 	sts	0x009F, r25	; 0x80009f <sg_Timer1_callBackPtr+0x1>
     c68:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <sg_Timer1_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c6c:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer0_callBackPtr = a_timerCallBack;
				break;
			case TIMER_1:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
     c6e:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
     c70:	90 93 9d 00 	sts	0x009D, r25	; 0x80009d <sg_Timer2_callBackPtr+0x1>
     c74:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <sg_Timer2_callBackPtr>
	}
	return l_ret;
}
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
     c78:	80 e0       	ldi	r24, 0x00	; 0
				sg_Timer1_callBackPtr = a_timerCallBack;
				break;
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
     c7a:	08 95       	ret
u8_en_timerErrorsType TIMER_setCallBack( void(*a_timerCallBack)(void), u8_en_timerNumberType u8_a_timerNum )
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==a_timerCallBack || u8_a_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	08 95       	ret
     c80:	83 e0       	ldi	r24, 0x03	; 3
     c82:	08 95       	ret
			case TIMER_2:
				/* load the address of the Call back function from upper layer in the global pointer to function */
				sg_Timer2_callBackPtr = a_timerCallBack;
				break;
			default:
				l_ret = TIMER_E_NOT_OK;
     c84:	83 e0       	ldi	r24, 0x03	; 3
				break;
		}
	}
	return l_ret;
     c86:	08 95       	ret

00000c88 <init_theArrayOfIDs>:
     c88:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <enu_sg_sos_init_status>
     c8c:	81 30       	cpi	r24, 0x01	; 1
     c8e:	99 f1       	breq	.+102    	; 0xcf6 <init_theArrayOfIDs+0x6e>
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	08 95       	ret
     c94:	51 e0       	ldi	r21, 0x01	; 1
     c96:	54 0f       	add	r21, r20
     c98:	85 2f       	mov	r24, r21
     c9a:	29 c0       	rjmp	.+82     	; 0xcee <init_theArrayOfIDs+0x66>
     c9c:	e4 2f       	mov	r30, r20
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	ee 0f       	add	r30, r30
     ca2:	ff 1f       	adc	r31, r31
     ca4:	e7 54       	subi	r30, 0x47	; 71
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	a0 81       	ld	r26, Z
     caa:	b1 81       	ldd	r27, Z+1	; 0x01
     cac:	2c 91       	ld	r18, X
     cae:	e8 2f       	mov	r30, r24
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	ee 0f       	add	r30, r30
     cb4:	ff 1f       	adc	r31, r31
     cb6:	e7 54       	subi	r30, 0x47	; 71
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	01 90       	ld	r0, Z+
     cbc:	f0 81       	ld	r31, Z
     cbe:	e0 2d       	mov	r30, r0
     cc0:	90 81       	ld	r25, Z
     cc2:	29 17       	cp	r18, r25
     cc4:	48 f4       	brcc	.+18     	; 0xcd8 <init_theArrayOfIDs+0x50>
     cc6:	e3 2f       	mov	r30, r19
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	11 96       	adiw	r26, 0x01	; 1
     ccc:	9c 91       	ld	r25, X
     cce:	ee 55       	subi	r30, 0x5E	; 94
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	90 83       	st	Z, r25
     cd4:	3f 5f       	subi	r19, 0xFF	; 255
     cd6:	0a c0       	rjmp	.+20     	; 0xcec <init_theArrayOfIDs+0x64>
     cd8:	92 17       	cp	r25, r18
     cda:	40 f4       	brcc	.+16     	; 0xcec <init_theArrayOfIDs+0x64>
     cdc:	63 2f       	mov	r22, r19
     cde:	70 e0       	ldi	r23, 0x00	; 0
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	fb 01       	movw	r30, r22
     ce4:	ee 55       	subi	r30, 0x5E	; 94
     ce6:	ff 4f       	sbci	r31, 0xFF	; 255
     ce8:	90 83       	st	Z, r25
     cea:	3f 5f       	subi	r19, 0xFF	; 255
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	83 30       	cpi	r24, 0x03	; 3
     cf0:	a8 f2       	brcs	.-86     	; 0xc9c <init_theArrayOfIDs+0x14>
     cf2:	45 2f       	mov	r20, r21
     cf4:	02 c0       	rjmp	.+4      	; 0xcfa <init_theArrayOfIDs+0x72>
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	43 30       	cpi	r20, 0x03	; 3
     cfc:	58 f2       	brcs	.-106    	; 0xc94 <init_theArrayOfIDs+0xc>
     cfe:	81 e0       	ldi	r24, 0x01	; 1
     d00:	08 95       	ret

00000d02 <SOS_timer_handelr>:
     d02:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <uintu8_sg_sos_index_1>
     d06:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <uintu8_sg_sos_index_1+0x1>
     d0a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <uintu8_sg_sos_index_1+0x2>
     d0e:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <uintu8_sg_sos_index_1+0x3>
     d12:	2e c0       	rjmp	.+92     	; 0xd70 <SOS_timer_handelr+0x6e>
     d14:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <uintu8_sg_sos_index_1>
     d18:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <uintu8_sg_sos_index_1+0x1>
     d1c:	a0 91 ab 00 	lds	r26, 0x00AB	; 0x8000ab <uintu8_sg_sos_index_1+0x2>
     d20:	b0 91 ac 00 	lds	r27, 0x00AC	; 0x8000ac <uintu8_sg_sos_index_1+0x3>
     d24:	88 0f       	add	r24, r24
     d26:	99 1f       	adc	r25, r25
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	fc 01       	movw	r30, r24
     d2e:	e3 55       	subi	r30, 0x53	; 83
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	40 81       	ld	r20, Z
     d34:	51 81       	ldd	r21, Z+1	; 0x01
     d36:	62 81       	ldd	r22, Z+2	; 0x02
     d38:	73 81       	ldd	r23, Z+3	; 0x03
     d3a:	4f 5f       	subi	r20, 0xFF	; 255
     d3c:	5f 4f       	sbci	r21, 0xFF	; 255
     d3e:	6f 4f       	sbci	r22, 0xFF	; 255
     d40:	7f 4f       	sbci	r23, 0xFF	; 255
     d42:	40 83       	st	Z, r20
     d44:	51 83       	std	Z+1, r21	; 0x01
     d46:	62 83       	std	Z+2, r22	; 0x02
     d48:	73 83       	std	Z+3, r23	; 0x03
     d4a:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <uintu8_sg_sos_index_1>
     d4e:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <uintu8_sg_sos_index_1+0x1>
     d52:	a0 91 ab 00 	lds	r26, 0x00AB	; 0x8000ab <uintu8_sg_sos_index_1+0x2>
     d56:	b0 91 ac 00 	lds	r27, 0x00AC	; 0x8000ac <uintu8_sg_sos_index_1+0x3>
     d5a:	01 96       	adiw	r24, 0x01	; 1
     d5c:	a1 1d       	adc	r26, r1
     d5e:	b1 1d       	adc	r27, r1
     d60:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <uintu8_sg_sos_index_1>
     d64:	90 93 aa 00 	sts	0x00AA, r25	; 0x8000aa <uintu8_sg_sos_index_1+0x1>
     d68:	a0 93 ab 00 	sts	0x00AB, r26	; 0x8000ab <uintu8_sg_sos_index_1+0x2>
     d6c:	b0 93 ac 00 	sts	0x00AC, r27	; 0x8000ac <uintu8_sg_sos_index_1+0x3>
     d70:	80 91 a9 00 	lds	r24, 0x00A9	; 0x8000a9 <uintu8_sg_sos_index_1>
     d74:	90 91 aa 00 	lds	r25, 0x00AA	; 0x8000aa <uintu8_sg_sos_index_1+0x1>
     d78:	a0 91 ab 00 	lds	r26, 0x00AB	; 0x8000ab <uintu8_sg_sos_index_1+0x2>
     d7c:	b0 91 ac 00 	lds	r27, 0x00AC	; 0x8000ac <uintu8_sg_sos_index_1+0x3>
     d80:	03 97       	sbiw	r24, 0x03	; 3
     d82:	a1 05       	cpc	r26, r1
     d84:	b1 05       	cpc	r27, r1
     d86:	30 f2       	brcs	.-116    	; 0xd14 <SOS_timer_handelr+0x12>
     d88:	8a e7       	ldi	r24, 0x7A	; 122
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 29 08 	call	0x1052	; 0x1052 <TIMER_Manager_reset>
     d90:	08 95       	ret

00000d92 <SOS_init>:
     d92:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <enu_sg_sos_init_status>
     d96:	81 11       	cpse	r24, r1
     d98:	1d c0       	rjmp	.+58     	; 0xdd4 <SOS_init+0x42>
     d9a:	81 e8       	ldi	r24, 0x81	; 129
     d9c:	96 e0       	ldi	r25, 0x06	; 6
     d9e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <st_g_sos_timer+0x6>
     da2:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <st_g_sos_timer+0x5>
     da6:	8a e7       	ldi	r24, 0x7A	; 122
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <TIMER_Manager_init>
     dae:	83 30       	cpi	r24, 0x03	; 3
     db0:	99 f0       	breq	.+38     	; 0xdd8 <SOS_init+0x46>
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	09 c0       	rjmp	.+18     	; 0xdc8 <SOS_init+0x36>
     db6:	e9 2f       	mov	r30, r25
     db8:	f0 e0       	ldi	r31, 0x00	; 0
     dba:	ee 0f       	add	r30, r30
     dbc:	ff 1f       	adc	r31, r31
     dbe:	e7 54       	subi	r30, 0x47	; 71
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	11 82       	std	Z+1, r1	; 0x01
     dc4:	10 82       	st	Z, r1
     dc6:	9f 5f       	subi	r25, 0xFF	; 255
     dc8:	93 30       	cpi	r25, 0x03	; 3
     dca:	a8 f3       	brcs	.-22     	; 0xdb6 <SOS_init+0x24>
     dcc:	91 e0       	ldi	r25, 0x01	; 1
     dce:	90 93 bf 00 	sts	0x00BF, r25	; 0x8000bf <enu_sg_sos_init_status>
     dd2:	08 95       	ret
     dd4:	84 e0       	ldi	r24, 0x04	; 4
     dd6:	08 95       	ret
     dd8:	86 e0       	ldi	r24, 0x06	; 6
     dda:	08 95       	ret

00000ddc <SOS_disable>:
     ddc:	1b ba       	out	0x1b, r1	; 27
     dde:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <enu_sg_sos_init_status>
     de2:	81 30       	cpi	r24, 0x01	; 1
     de4:	49 f4       	brne	.+18     	; 0xdf8 <SOS_disable+0x1c>
     de6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <st_g_sos_timer>
     dea:	0e 94 22 08 	call	0x1044	; 0x1044 <TIMER_Manager_stop>
     dee:	83 30       	cpi	r24, 0x03	; 3
     df0:	21 f0       	breq	.+8      	; 0xdfa <SOS_disable+0x1e>
     df2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <u8_sg_sos_enable_flag>
     df6:	08 95       	ret
     df8:	83 e0       	ldi	r24, 0x03	; 3
     dfa:	08 95       	ret

00000dfc <SOS_run>:
     dfc:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Start_Flag>
     e00:	81 30       	cpi	r24, 0x01	; 1
     e02:	09 f0       	breq	.+2      	; 0xe06 <SOS_run+0xa>
     e04:	9b c0       	rjmp	.+310    	; 0xf3c <SOS_run+0x140>
     e06:	80 91 bf 00 	lds	r24, 0x00BF	; 0x8000bf <enu_sg_sos_init_status>
     e0a:	81 30       	cpi	r24, 0x01	; 1
     e0c:	b9 f7       	brne	.-18     	; 0xdfc <SOS_run>
     e0e:	8a e7       	ldi	r24, 0x7A	; 122
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	0e 94 10 08 	call	0x1020	; 0x1020 <TIMER_Manager_start>
     e16:	83 30       	cpi	r24, 0x03	; 3
     e18:	89 f3       	breq	.-30     	; 0xdfc <SOS_run>
     e1a:	0e 94 44 06 	call	0xc88	; 0xc88 <init_theArrayOfIDs>
     e1e:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <uintu8_sg_sos_index_2>
     e22:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <uintu8_sg_sos_index_2+0x1>
     e26:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <uintu8_sg_sos_index_2+0x2>
     e2a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <uintu8_sg_sos_index_2+0x3>
     e2e:	78 c0       	rjmp	.+240    	; 0xf20 <SOS_run+0x124>
     e30:	8f ef       	ldi	r24, 0xFF	; 255
     e32:	8b bb       	out	0x1b, r24	; 27
     e34:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2>
     e38:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x1>
     e3c:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x2>
     e40:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_2+0x3>
     e44:	fc 01       	movw	r30, r24
     e46:	ee 55       	subi	r30, 0x5E	; 94
     e48:	ff 4f       	sbci	r31, 0xFF	; 255
     e4a:	e0 81       	ld	r30, Z
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	ee 0f       	add	r30, r30
     e50:	ff 1f       	adc	r31, r31
     e52:	e7 54       	subi	r30, 0x47	; 71
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	01 90       	ld	r0, Z+
     e58:	f0 81       	ld	r31, Z
     e5a:	e0 2d       	mov	r30, r0
     e5c:	82 81       	ldd	r24, Z+2	; 0x02
     e5e:	93 81       	ldd	r25, Z+3	; 0x03
     e60:	a0 e0       	ldi	r26, 0x00	; 0
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	40 91 a5 00 	lds	r20, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2>
     e68:	50 91 a6 00 	lds	r21, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x1>
     e6c:	60 91 a7 00 	lds	r22, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x2>
     e70:	70 91 a8 00 	lds	r23, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_2+0x3>
     e74:	fa 01       	movw	r30, r20
     e76:	ee 55       	subi	r30, 0x5E	; 94
     e78:	ff 4f       	sbci	r31, 0xFF	; 255
     e7a:	e0 81       	ld	r30, Z
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	ee 0f       	add	r30, r30
     e80:	ff 1f       	adc	r31, r31
     e82:	ee 0f       	add	r30, r30
     e84:	ff 1f       	adc	r31, r31
     e86:	e3 55       	subi	r30, 0x53	; 83
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	40 81       	ld	r20, Z
     e8c:	51 81       	ldd	r21, Z+1	; 0x01
     e8e:	62 81       	ldd	r22, Z+2	; 0x02
     e90:	73 81       	ldd	r23, Z+3	; 0x03
     e92:	84 17       	cp	r24, r20
     e94:	95 07       	cpc	r25, r21
     e96:	a6 07       	cpc	r26, r22
     e98:	b7 07       	cpc	r27, r23
     e9a:	79 f5       	brne	.+94     	; 0xefa <SOS_run+0xfe>
     e9c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2>
     ea0:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x1>
     ea4:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x2>
     ea8:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_2+0x3>
     eac:	fc 01       	movw	r30, r24
     eae:	ee 55       	subi	r30, 0x5E	; 94
     eb0:	ff 4f       	sbci	r31, 0xFF	; 255
     eb2:	e0 81       	ld	r30, Z
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	ee 0f       	add	r30, r30
     eb8:	ff 1f       	adc	r31, r31
     eba:	e7 54       	subi	r30, 0x47	; 71
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	01 90       	ld	r0, Z+
     ec0:	f0 81       	ld	r31, Z
     ec2:	e0 2d       	mov	r30, r0
     ec4:	05 80       	ldd	r0, Z+5	; 0x05
     ec6:	f6 81       	ldd	r31, Z+6	; 0x06
     ec8:	e0 2d       	mov	r30, r0
     eca:	09 95       	icall
     ecc:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2>
     ed0:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x1>
     ed4:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x2>
     ed8:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_2+0x3>
     edc:	fc 01       	movw	r30, r24
     ede:	ee 55       	subi	r30, 0x5E	; 94
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	e0 81       	ld	r30, Z
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	ee 0f       	add	r30, r30
     ee8:	ff 1f       	adc	r31, r31
     eea:	ee 0f       	add	r30, r30
     eec:	ff 1f       	adc	r31, r31
     eee:	e3 55       	subi	r30, 0x53	; 83
     ef0:	ff 4f       	sbci	r31, 0xFF	; 255
     ef2:	10 82       	st	Z, r1
     ef4:	11 82       	std	Z+1, r1	; 0x01
     ef6:	12 82       	std	Z+2, r1	; 0x02
     ef8:	13 82       	std	Z+3, r1	; 0x03
     efa:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2>
     efe:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x1>
     f02:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x2>
     f06:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_2+0x3>
     f0a:	01 96       	adiw	r24, 0x01	; 1
     f0c:	a1 1d       	adc	r26, r1
     f0e:	b1 1d       	adc	r27, r1
     f10:	80 93 a5 00 	sts	0x00A5, r24	; 0x8000a5 <uintu8_sg_sos_index_2>
     f14:	90 93 a6 00 	sts	0x00A6, r25	; 0x8000a6 <uintu8_sg_sos_index_2+0x1>
     f18:	a0 93 a7 00 	sts	0x00A7, r26	; 0x8000a7 <uintu8_sg_sos_index_2+0x2>
     f1c:	b0 93 a8 00 	sts	0x00A8, r27	; 0x8000a8 <uintu8_sg_sos_index_2+0x3>
     f20:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <uintu8_sg_sos_index_2>
     f24:	90 91 a6 00 	lds	r25, 0x00A6	; 0x8000a6 <uintu8_sg_sos_index_2+0x1>
     f28:	a0 91 a7 00 	lds	r26, 0x00A7	; 0x8000a7 <uintu8_sg_sos_index_2+0x2>
     f2c:	b0 91 a8 00 	lds	r27, 0x00A8	; 0x8000a8 <uintu8_sg_sos_index_2+0x3>
     f30:	03 97       	sbiw	r24, 0x03	; 3
     f32:	a1 05       	cpc	r26, r1
     f34:	b1 05       	cpc	r27, r1
     f36:	08 f4       	brcc	.+2      	; 0xf3a <SOS_run+0x13e>
     f38:	7b cf       	rjmp	.-266    	; 0xe30 <SOS_run+0x34>
     f3a:	60 cf       	rjmp	.-320    	; 0xdfc <SOS_run>
     f3c:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <Start_Flag>
     f40:	82 30       	cpi	r24, 0x02	; 2
     f42:	09 f0       	breq	.+2      	; 0xf46 <SOS_run+0x14a>
     f44:	5b cf       	rjmp	.-330    	; 0xdfc <SOS_run>
     f46:	0e 94 ee 06 	call	0xddc	; 0xddc <SOS_disable>
     f4a:	58 cf       	rjmp	.-336    	; 0xdfc <SOS_run>

00000f4c <SOS_create_task>:
     f4c:	dc 01       	movw	r26, r24
     f4e:	11 96       	adiw	r26, 0x01	; 1
     f50:	2c 91       	ld	r18, X
     f52:	11 97       	sbiw	r26, 0x01	; 1
     f54:	23 30       	cpi	r18, 0x03	; 3
     f56:	10 f5       	brcc	.+68     	; 0xf9c <SOS_create_task+0x50>
     f58:	15 96       	adiw	r26, 0x05	; 5
     f5a:	4d 91       	ld	r20, X+
     f5c:	5c 91       	ld	r21, X
     f5e:	16 97       	sbiw	r26, 0x06	; 6
     f60:	45 2b       	or	r20, r21
     f62:	f1 f0       	breq	.+60     	; 0xfa0 <SOS_create_task+0x54>
     f64:	00 97       	sbiw	r24, 0x00	; 0
     f66:	f1 f0       	breq	.+60     	; 0xfa4 <SOS_create_task+0x58>
     f68:	30 91 bf 00 	lds	r19, 0x00BF	; 0x8000bf <enu_sg_sos_init_status>
     f6c:	31 30       	cpi	r19, 0x01	; 1
     f6e:	e1 f4       	brne	.+56     	; 0xfa8 <SOS_create_task+0x5c>
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	f9 01       	movw	r30, r18
     f74:	ee 0f       	add	r30, r30
     f76:	ff 1f       	adc	r31, r31
     f78:	e7 54       	subi	r30, 0x47	; 71
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	01 90       	ld	r0, Z+
     f7e:	f0 81       	ld	r31, Z
     f80:	e0 2d       	mov	r30, r0
     f82:	45 81       	ldd	r20, Z+5	; 0x05
     f84:	56 81       	ldd	r21, Z+6	; 0x06
     f86:	45 2b       	or	r20, r21
     f88:	89 f4       	brne	.+34     	; 0xfac <SOS_create_task+0x60>
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	f9 01       	movw	r30, r18
     f90:	e7 54       	subi	r30, 0x47	; 71
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	91 83       	std	Z+1, r25	; 0x01
     f96:	80 83       	st	Z, r24
     f98:	81 e0       	ldi	r24, 0x01	; 1
     f9a:	08 95       	ret
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	08 95       	ret
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	08 95       	ret
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	08 95       	ret
     fa8:	80 e0       	ldi	r24, 0x00	; 0
     faa:	08 95       	ret
     fac:	80 e0       	ldi	r24, 0x00	; 0
     fae:	08 95       	ret

00000fb0 <EXT_INTx_setCallBack_manger>:


Std_ReturnType EXT_INTx_setCallBack_manger(void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
     fb0:	00 97       	sbiw	r24, 0x00	; 0
     fb2:	29 f0       	breq	.+10     	; 0xfbe <EXT_INTx_setCallBack_manger+0xe>
     fb4:	63 30       	cpi	r22, 0x03	; 3
     fb6:	28 f4       	brcc	.+10     	; 0xfc2 <EXT_INTx_setCallBack_manger+0x12>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret=EXT_INTx_setCallBack(a_fptr,a_interrupt_number);
     fb8:	0e 94 61 02 	call	0x4c2	; 0x4c2 <EXT_INTx_setCallBack>
     fbc:	08 95       	ret
Std_ReturnType EXT_INTx_setCallBack_manger(void(*a_fptr)(void),  Interrupt_ID_t a_interrupt_number )
{
	Std_ReturnType ret = E_OK;
	if(NULL == a_fptr || a_interrupt_number > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	08 95       	ret
     fc2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret=EXT_INTx_setCallBack(a_fptr,a_interrupt_number);
	}
	return ret;
}
     fc4:	08 95       	ret

00000fc6 <EXT_INTx_Init_manger>:

Std_ReturnType EXT_INTx_Init_manger( Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	39 f0       	breq	.+14     	; 0xfd8 <EXT_INTx_Init_manger+0x12>
     fca:	fc 01       	movw	r30, r24
     fcc:	21 81       	ldd	r18, Z+1	; 0x01
     fce:	23 30       	cpi	r18, 0x03	; 3
     fd0:	28 f4       	brcc	.+10     	; 0xfdc <EXT_INTx_Init_manger+0x16>
	{
		ret = E_NOT_OK;
	}
	else
	{
		ret=EXT_INTx_Init(Interrupt_Config_Ptr);
     fd2:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <EXT_INTx_Init>
     fd6:	08 95       	ret
Std_ReturnType EXT_INTx_Init_manger( Interrupt_Config_t *Interrupt_Config_Ptr )
{
	Std_ReturnType ret = E_OK;
	if(NULL == Interrupt_Config_Ptr || Interrupt_Config_Ptr->source_id > NUM_OF_EXT_INTx - 1)
	{
		ret = E_NOT_OK;
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	08 95       	ret
     fdc:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret=EXT_INTx_Init(Interrupt_Config_Ptr);
	}
	return ret;
}
     fde:	08 95       	ret

00000fe0 <TIMER_Manager_init>:
#include "timer_manager.h"
#include "../../MCAL/timer/timer.h"


u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
     fe0:	1f 93       	push	r17
     fe2:	cf 93       	push	r28
     fe4:	df 93       	push	r29
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	91 f0       	breq	.+36     	; 0x100e <TIMER_Manager_init+0x2e>
     fea:	fc 01       	movw	r30, r24
     fec:	20 81       	ld	r18, Z
     fee:	23 30       	cpi	r18, 0x03	; 3
     ff0:	80 f4       	brcc	.+32     	; 0x1012 <TIMER_Manager_init+0x32>
     ff2:	21 81       	ldd	r18, Z+1	; 0x01
     ff4:	2a 30       	cpi	r18, 0x0A	; 10
     ff6:	78 f4       	brcc	.+30     	; 0x1016 <TIMER_Manager_init+0x36>
     ff8:	ec 01       	movw	r28, r24
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret  = TIMER_init(st_config);
     ffa:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <TIMER_init>
     ffe:	18 2f       	mov	r17, r24
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
    1000:	68 81       	ld	r22, Y
    1002:	8d 81       	ldd	r24, Y+5	; 0x05
    1004:	9e 81       	ldd	r25, Y+6	; 0x06
    1006:	0e 94 22 06 	call	0xc44	; 0xc44 <TIMER_setCallBack>
    100a:	81 2b       	or	r24, r17
    100c:	05 c0       	rjmp	.+10     	; 0x1018 <TIMER_Manager_init+0x38>
u8_en_timerErrorsType TIMER_Manager_init (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	03 c0       	rjmp	.+6      	; 0x1018 <TIMER_Manager_init+0x38>
    1012:	83 e0       	ldi	r24, 0x03	; 3
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <TIMER_Manager_init+0x38>
    1016:	83 e0       	ldi	r24, 0x03	; 3
	{
		l_ret  = TIMER_init(st_config);
		l_ret |= TIMER_setCallBack(st_config->callBackFunction,st_config->u8_timerNum);
	}
	return l_ret;
}
    1018:	df 91       	pop	r29
    101a:	cf 91       	pop	r28
    101c:	1f 91       	pop	r17
    101e:	08 95       	ret

00001020 <TIMER_Manager_start>:
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
    1020:	00 97       	sbiw	r24, 0x00	; 0
    1022:	51 f0       	breq	.+20     	; 0x1038 <TIMER_Manager_start+0x18>
    1024:	fc 01       	movw	r30, r24
    1026:	20 81       	ld	r18, Z
    1028:	23 30       	cpi	r18, 0x03	; 3
    102a:	40 f4       	brcc	.+16     	; 0x103c <TIMER_Manager_start+0x1c>
    102c:	21 81       	ldd	r18, Z+1	; 0x01
    102e:	2a 30       	cpi	r18, 0x0A	; 10
    1030:	38 f4       	brcc	.+14     	; 0x1040 <TIMER_Manager_start+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_start(st_config);
    1032:	0e 94 81 04 	call	0x902	; 0x902 <TIMER_start>
    1036:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_start (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    1038:	83 e0       	ldi	r24, 0x03	; 3
    103a:	08 95       	ret
    103c:	83 e0       	ldi	r24, 0x03	; 3
    103e:	08 95       	ret
    1040:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_start(st_config);
	}
	return l_ret;
}
    1042:	08 95       	ret

00001044 <TIMER_Manager_stop>:
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
    1044:	83 30       	cpi	r24, 0x03	; 3
    1046:	18 f4       	brcc	.+6      	; 0x104e <TIMER_Manager_stop+0xa>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
    1048:	0e 94 cd 05 	call	0xb9a	; 0xb9a <TIMER_stop>
    104c:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_stop (u8_en_timerNumberType u8_en_timerNum)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if( u8_en_timerNum >= TIMER_INVALID_NUM )
	{
		l_ret = TIMER_E_NOT_OK;
    104e:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_stop(u8_en_timerNum);
	}
	return l_ret;
}
    1050:	08 95       	ret

00001052 <TIMER_Manager_reset>:
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
    1052:	00 97       	sbiw	r24, 0x00	; 0
    1054:	51 f0       	breq	.+20     	; 0x106a <TIMER_Manager_reset+0x18>
    1056:	fc 01       	movw	r30, r24
    1058:	20 81       	ld	r18, Z
    105a:	23 30       	cpi	r18, 0x03	; 3
    105c:	40 f4       	brcc	.+16     	; 0x106e <TIMER_Manager_reset+0x1c>
    105e:	21 81       	ldd	r18, Z+1	; 0x01
    1060:	2a 30       	cpi	r18, 0x0A	; 10
    1062:	38 f4       	brcc	.+14     	; 0x1072 <TIMER_Manager_reset+0x20>
	{
		l_ret = TIMER_E_NOT_OK;
	}
	else
	{
		l_ret = TIMER_reset(st_config);
    1064:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <TIMER_reset>
    1068:	08 95       	ret
u8_en_timerErrorsType TIMER_Manager_reset (st_timerConfigType* st_config)
{
	u8_en_timerErrorsType l_ret = TIMER_E_OK;
	if(NULL==st_config || st_config->u8_timerNum >= TIMER_INVALID_NUM || st_config->u8_timerClock >= TIMER_INVALID_CLOCK)
	{
		l_ret = TIMER_E_NOT_OK;
    106a:	83 e0       	ldi	r24, 0x03	; 3
    106c:	08 95       	ret
    106e:	83 e0       	ldi	r24, 0x03	; 3
    1070:	08 95       	ret
    1072:	83 e0       	ldi	r24, 0x03	; 3
	else
	{
		l_ret = TIMER_reset(st_config);
	}
	return l_ret;
    1074:	08 95       	ret

00001076 <__tablejump2__>:
    1076:	ee 0f       	add	r30, r30
    1078:	ff 1f       	adc	r31, r31
    107a:	05 90       	lpm	r0, Z+
    107c:	f4 91       	lpm	r31, Z
    107e:	e0 2d       	mov	r30, r0
    1080:	09 94       	ijmp

00001082 <_exit>:
    1082:	f8 94       	cli

00001084 <__stop_program>:
    1084:	ff cf       	rjmp	.-2      	; 0x1084 <__stop_program>
